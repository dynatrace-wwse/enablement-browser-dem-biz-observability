{
  "title": "Business Data Generator - Business Observability Workshop",
  "tasks": {
    "config": {
      "name": "config",
      "action": "dynatrace.automations:run-javascript",
      "description": "Build a custom task running js Code",
      "input": {
        "script": "import { execution } from \"@dynatrace-sdk/automation-utils\"\n\nexport default async function ({ execution_id }) {\n  // NB - CURRENTLY ALL PIECES OF CONFIG ARE MANDATORY\n\n  // If using the defaults that the generator comes with, set the below to true so that a default dashboard\n  // is imported which shows several examples of visualisations.\n  const EXAMPLE_DASHBOARD = true\n\n  // A name that describes this business process - this will be used as the name for the Business Flow that\n  // gets created, and also the dashboard if you choose to have it.\n  const FLOW_NAME = \"[RETAIL] eCommerce order delivery\"\n\n  // Name of the event.provider field that will be used. Events in the future will be stored in a provider\n  // with \".temp\" appended to the end.\n  const EVENT_PROVIDER = \"acme.retail\"\n\n  // Name of the correlation ID that will be added to each BizEvent, this will be the name\n  // of the field that you see in the BizEvent.\n  const CORRELATION_ID = \"order.id\"\n\n  // Steps you wish the process to have, the first field is the \"pretty name\", the\n  // second is what the \"event.type\" in the BizEvent will be, and the numbers after it are:\n  // First number: \"Drop off\" percentage. e.g. 5 = 5% of users will drop off.\n  // Second number: Minimum time (in hours) for the step to take.\n  // Third number: Maximum time (in hours) for the step to take.\n  // N.B - So far only tested with processes taking up to 48 hours.\n  // Boolean: Will this step \"loop\" and be repeated several times before the process continues?\n  // Number: Max number of times this step should loop.\n  // Note: Step 1 doesn't use any of the numbers and the last step cannot loop.\n  const PROCESS_STEPS = [\n    [\"Place order\", \"place.order\"],\n    [\"Received in warehouse\", \"warehouse.received\", 5, 0.1, 0.2, false, 1],\n    [\"Item picked\", \"item.picked\", 1, 0.1, 0.2, true, 3],\n    [\"Order packed\", \"order.packed\", 1, 1, 2, false, 1],\n    [\"Order shipped\", \"order.shipped\", 5, 0.5, 1, false, 1],\n    [\"Delivery re-attempted\", \"delivery.reattempted\", 5, 0.5, 1, false, 1],\n    [\"Order received\", \"order.received\", 1, 0.1, 0.2],\n  ]\n\n  // Which of the steps would you like to be optional?\n  // First number: The \"0 indexed\" step number (for example step 6 is step 5).\n  // Second number: Percentage of flows that will do this step. e.g. 40 = 40% of users will do it.\n  // NB - So far only tested on steps that are NOT the first or last.\n  const OPTIONAL_STEP = [5, 40]\n\n  // Locations you wish to be attached to the users, the number after it\n  // is the percentage that will have that location - they must add up to 100.\n  const LOCATIONS_WITH_PERCENTAGE = [\n    [\"London\", 25],\n    [\"Manchester\", 20],\n    [\"Birmingham\", 12],\n    [\"Newcastle\", 10],\n    [\"Glasgow\", 8],\n    [\"Portsmouth\", 7],\n    [\"Reading\", 6],\n    [\"Leicester\", 5],\n    [\"Liverpool\", 4],\n    [\"Leeds\", 3],\n  ]\n\n  // Which steps would you like to have location data attached to?\n  // This is also \"0 indexed\" - so step 0 is the first step.\n  const LOCATIONS = [0, 1]\n\n  // Add in a custom user segment, and which steps you would like to contain the data.\n  // String: Name of the field to be added to the Biz Event.\n  // Array: List of steps you would like to have the segment data attached to.\n  const SEGMENT = [\"loyalty\", [0, 2]]\n\n  // Different values to be used for your segment. A list of values with the\n  // number representing what percentage of users will have it. They must all add\n  // up to 100.\n  const SEGMENTS = [\n    [\"gold\", 60],\n    [\"silver\", 20],\n    [\"bronze\", 10],\n    [\"basic\", 10],\n  ]\n\n  // Add in a revenue field used to attach the monetary value to a Biz Event.\n  // String: Name of the field to be added to the Biz Event.\n  // Array: List of steps you would like to have the revenue data attached to.\n  // First number: Minimum value.\n  // Second number: Maximum value.\n  // String: The \"pretty name\" of the revenue field.\n  const REVENUE = [\"order.value\", [0], 100, 2000, \"Revenue\"]\n\n  // Hosts from your environment that you can randomly attribute to Biz Events, you need to\n  // use the Dynatrace identifier and make sure the percentages add up to 100.\n  const HOST_ENTITY = [\n    [\"HOST-218FBE0DE60A5B16\", 50],\n    [\"HOST-DA9370FA4A602E97\", 50],\n  ]\n\n  // Different errors that you want to attach to a certain step:\n  // - First field is the name of the error which will be appeneded to the step name.\n  // - Second field is the (zero indexed) step this error will happen on.\n  // - Third field is the percentage of time this error will happen. (which is only used in newly generated data)\n  // For this first batch of data, anything in the last 2 hours will be a guaranteed error.\n  const ERRORS_WITH_PERCENTAGE = [[\"system.outage\", 4, 10]]\n\n  // Distribute the load by the time of day, by default the \"peak\" is around midday\n  // - First field is the hour of the day, so 0 being midnight.\n  // - Second field is the percentage distribution.\n  // As usual, all percentages must add up to 100.\n  const TIMES_OF_DAY = [\n    [0, 1],\n    [1, 1],\n    [2, 1],\n    [3, 1],\n    [4, 2],\n    [5, 3],\n    [6, 3],\n    [7, 4],\n    [8, 6],\n    [9, 9],\n    [10, 9],\n    [11, 10],\n    [12, 10],\n    [13, 9],\n    [14, 9],\n    [15, 6],\n    [16, 4],\n    [17, 3],\n    [18, 3],\n    [19, 2],\n    [20, 1],\n    [21, 1],\n    [22, 1],\n    [23, 1],\n  ]\n\n  const VARIABLES = {\n    EVENT_PROVIDER: EVENT_PROVIDER,\n    PROCESS_STEPS: PROCESS_STEPS,\n    LOCATIONS_WITH_PERCENTAGE: LOCATIONS_WITH_PERCENTAGE,\n    SEGMENT: SEGMENT,\n    SEGMENTS: SEGMENTS,\n    HOST_ENTITY: HOST_ENTITY,\n    CORRELATION_ID: CORRELATION_ID,\n    ERRORS_WITH_PERCENTAGE: ERRORS_WITH_PERCENTAGE,\n    TIMES_OF_DAY: TIMES_OF_DAY,\n    FLOW_NAME: FLOW_NAME,\n    REVENUE: REVENUE,\n    LOCATIONS: LOCATIONS,\n    OPTIONAL_STEP: OPTIONAL_STEP,\n    EXAMPLE_DASHBOARD: EXAMPLE_DASHBOARD,\n  }\n\n  return VARIABLES\n}\n"
      },
      "position": {
        "x": 0,
        "y": 1
      },
      "predecessors": [],
      "conditions": {
        "states": {}
      }
    },
    "create_bizflow": {
      "name": "create_bizflow",
      "action": "dynatrace.automations:run-javascript",
      "description": "Build a custom task running js Code",
      "input": {
        "script": "// Import of sdk modules\nimport { execution } from '@dynatrace-sdk/automation-utils';\nimport { settingsObjectsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\nimport { appEngineRegistryAppsClient } from '@dynatrace-sdk/client-app-engine-registry';\n\nexport default async function ({ execution_id }) {\n\n  // Variable declaration\n  const configGet = await fetch(`/platform/automation/v1/executions/${execution_id}/tasks/config/result`);\n  const configBody = await configGet.json();\n    \n  const EVENT_PROVIDER = configBody['EVENT_PROVIDER'];\n  const PROCESS_STEPS = configBody['PROCESS_STEPS'];\n  const SEGMENT_INDEX = configBody['SEGMENT'][1];\n  const SEGMENT_NAME = configBody['SEGMENT'][0]; \n  const SEGMENTS = configBody['SEGMENTS'];\n  const CORRELATION_ID = configBody['CORRELATION_ID'];\n  const ERRORS_WITH_PERCENTAGE = configBody['ERRORS_WITH_PERCENTAGE'];\n  const LOCATIONS = configBody['LOCATIONS'];\n  const REVENUE_NAME = configBody['REVENUE'][0];\n  const REVENUE_INDEX = configBody['REVENUE'][1];\n  const REVENUE_MIN = configBody['REVENUE'][2];\n  const REVENUE_MAX = configBody['REVENUE'][3];\n  const REVENUE_PRETTY_NAME = configBody['REVENUE'][4];\n  const OPTIONAL_STEP = configBody['OPTIONAL_STEP'];\n  const FLOW_NAME = configBody['FLOW_NAME'];\n  var bizFlowCheck = false;\n  var appInstallCheck = false;\n  const EXTERNAL_ID = EVENT_PROVIDER.replaceAll(\".\", \"-\") + \"-bizflow\";\n  console.log(\"External ID: \" + EXTERNAL_ID);\n\n  // Check if the BizFlow app is already installed.\n  const apps = await appEngineRegistryAppsClient.getApps();\n  apps.apps.forEach((app) => {\n    if(app['id'] == \"dynatrace.biz.flow\"){\n      appInstallCheck = true;\n    }\n  })  \n\n  // Check if there is a config that already exists for the BizFlow app (defined\n  // by the \"externalId\" property).\n  const objects = await settingsObjectsClient.getSettingsObjects({\n    scopes: \"environment\",\n    schemaIds: \"app:dynatrace.biz.flow:biz-flow-settings\"\n  });  \n\n\n  //console.log(objects);\n  // if(objects.items.length > 0){\n  //   bizFlowCheck = true;\n  // }\n\n  // !!! To fix\n  for(var y=0;y<objects.items.length;y++) {\n    if(objects.items[y]['value']['name'] == FLOW_NAME) {\n      bizFlowCheck = true;\n    }\n  }\n  \n\n  // Function for checking if a certain step should return an error.\n  const checkIfError = (step) => {\n    var isError = false;\n    var errorName = \"\";\n    ERRORS_WITH_PERCENTAGE.forEach((item) => {\n      if(step == item[1]) {\n        isError = true;\n        errorName = item[0];\n      }\n    })\n  \n    const errorResult = {\n      \"isError\": isError,\n      \"errorName\": errorName\n    }\n    \n    return errorResult;\n  }\n\n  // If BizFlow app is installed and there is no existing config, then continue.\n  if(bizFlowCheck == false && appInstallCheck == true) {\n\n  // Declaration of the main body to send to Settings 2.0, the main important fields\n  // are \"schemaId\", \"externalId\", \"scope\" and \"value\". Value is the \"actual\" config for\n  // the BizFlow which will be constructed below.\n  var sendBody = [\n    {\n      \"schemaId\": \"app:dynatrace.biz.flow:biz-flow-settings\",\n      \"externalId\": EXTERNAL_ID,\n      \"scope\": \"environment\",\n      \"value\": {\n          \"name\": FLOW_NAME,\n          \"steps\": [],\n          \"connections\": [],\n          \"correlationID\": CORRELATION_ID,\n          \"kpiLabel\": REVENUE_PRETTY_NAME,\n          \"kpi\": REVENUE_NAME,\n          \"kpiEvent\": {\n            \"name\": PROCESS_STEPS[REVENUE_INDEX[0]][1],\n            \"provider\": EVENT_PROVIDER\n          },\n          \"analysisType\": \"fulfillment\"\n      }\n    }\n  ];\n\n  var steps = new Array;\n\n  // Loop through all the steps in the process, as defined by the \"config\" part of the \n  // Workflow.\n  PROCESS_STEPS.forEach((item, index) => {\n\n    // If it's the very first step, this is our \"root\" step.\n    if(index == 0) {\n      var isRoot = true;\n    }\n    else {\n      var isRoot = false;\n    }\n      \n    // Declare the config for each \"successful\" step like it's \"name\" and \"id\" as well as\n    // which BizEvents define it. Errors are added in further down.\n    var step = {\n      \"name\": item[0],\n      \"id\": crypto.randomUUID(),\n      \"isRoot\": isRoot,\n      \"events\": [\n        {\n          \"id\": \"provider:\" + EVENT_PROVIDER + \"-event:\" + item[1],\n          \"name\": item[1],\n          \"provider\": EVENT_PROVIDER,\n          \"isError\": false,\n          \"isDisabled\": false\n        }\n      ]\n    }\n  \n    sendBody[0][\"value\"][\"steps\"].push(step);\n    \n  })\n\n  var connections = [];\n\n  // Loop through the steps again and create the \"connections\" or \"relationships\" between them.\n  // For example what order are they in, and do we need to build any \"loops\" or \"optional\" steps.\n  // Errors are also defined in this section.\n  PROCESS_STEPS.forEach((item, index) => {\n    if(index != sendBody[0][\"value\"][\"steps\"].length-1) {\n      var connection = {\n        \"id\": sendBody[0][\"value\"][\"steps\"][index][\"id\"] + \"__\" + sendBody[0][\"value\"][\"steps\"][index+1][\"id\"],\n        \"source\": sendBody[0][\"value\"][\"steps\"][index][\"id\"],\n        \"target\": sendBody[0][\"value\"][\"steps\"][index+1][\"id\"]\n      }\n\n      sendBody[0][\"value\"][\"connections\"].push(connection);\n\n      if(index == OPTIONAL_STEP[0]) {\n        var optionalConnection = {\n          \"id\": sendBody[0][\"value\"][\"steps\"][index-1][\"id\"] + \"__\" + sendBody[0][\"value\"][\"steps\"][index+1][\"id\"],\n          \"source\": sendBody[0][\"value\"][\"steps\"][index-1][\"id\"],\n          \"target\": sendBody[0][\"value\"][\"steps\"][index+1][\"id\"]\n        }\n\n        sendBody[0][\"value\"][\"connections\"].push(optionalConnection);\n      }\n\n      if(item[5] == true) {\n        var repeatConnection = {\n          \"id\": sendBody[0][\"value\"][\"steps\"][index][\"id\"] + \"__\" + sendBody[0][\"value\"][\"steps\"][index][\"id\"],\n          \"source\": sendBody[0][\"value\"][\"steps\"][index][\"id\"],\n          \"target\": sendBody[0][\"value\"][\"steps\"][index][\"id\"]\n        }\n\n        sendBody[0][\"value\"][\"connections\"].push(repeatConnection);\n      }\n\n      // Here is where any errors are added into the \"steps\" configuration.\n      if(checkIfError(index)[\"isError\"] == true) {\n\n        var errorEvent = {\n          \"id\": \"provider:\" + EVENT_PROVIDER + \"-event:\" + item[1] + \".\" + checkIfError(index)[\"errorName\"],\n          \"name\": item[1] + \".\" + checkIfError(index)[\"errorName\"],\n          \"provider\": EVENT_PROVIDER,\n          \"isError\": true,\n          \"isDisabled\": false\n        }\n        sendBody[0][\"value\"][\"steps\"][index][\"events\"].push(errorEvent);\n      }\n    }\n  })\n\n\n  console.log(sendBody[0]);  \n  // Send the object we've constructed into the Settings 2.0 storage.\n  const data =\n    await settingsObjectsClient.postSettingsObjects({\n      body: [sendBody[0]],\n    });\n\n  console.log(data);\n\n    return data[0][\"objectId\"];\n  }\n\n  // Logic for handling if a BizFlow config already exists.\n  else if(bizFlowCheck == true) {\n    console.log(\"Biz flow exists, skipping.\");\n  }\n\n  // Logic for handling if the BizFlow app is not installed.\n  else if(appInstallCheck == false){\n    console.log(\"App not installed, skipping.\");\n  }\n\n  // Logic for handling any other issues.\n  else {\n    console.log(\"Skipping for unknown reason.\");\n  }\n  \n}"
      },
      "active": true,
      "position": {
        "x": -2,
        "y": 3
      },
      "predecessors": [
        "check_if_data_exists"
      ],
      "conditions": {
        "states": {
          "check_if_data_exists": "OK"
        }
      }
    },
    "generate_new_data": {
      "name": "generate_new_data",
      "action": "dynatrace.automations:run-javascript",
      "description": "Build a custom task running js Code",
      "input": {
        "script": "// Numbers for reference\nconst MS_IN_S = 1000;\nconst MS_IN_MINUTE = 60 * MS_IN_S;\nconst MS_IN_HOUR = 60 * MS_IN_MINUTE;\nconst MS_IN_DAY = 24 * MS_IN_HOUR;\n\nexport default async function ({ execution_id }) {\n\n  // Variable declaration\n  const configGet = await fetch(`/platform/automation/v1/executions/${execution_id}/tasks/config/result`);\n  const configBody = await configGet.json();\n    \n  const EVENT_PROVIDER = configBody['EVENT_PROVIDER'];\n  const PROCESS_STEPS = configBody['PROCESS_STEPS'];\n  const LOCATIONS_WITH_PERCENTAGE = configBody['LOCATIONS_WITH_PERCENTAGE'];\n  const SEGMENT_INDEX = configBody['SEGMENT'][1];\n  const SEGMENT_NAME = configBody['SEGMENT'][0]; \n  const SEGMENTS = configBody['SEGMENTS'];\n  const HOST_ENTITY = configBody['HOST_ENTITY'];\n  const CORRELATION_ID = configBody['CORRELATION_ID'];\n  const ERRORS_WITH_PERCENTAGE = configBody['ERRORS_WITH_PERCENTAGE'];\n  const TIMES_OF_DAY = configBody['TIMES_OF_DAY']; \n  const LOCATIONS = configBody['LOCATIONS'];\n  const REVENUE_NAME = configBody['REVENUE'][0];\n  const REVENUE_INDEX = configBody['REVENUE'][1];\n  const REVENUE_MIN = configBody['REVENUE'][2];\n  const REVENUE_MAX = configBody['REVENUE'][3];\n  const OPTIONAL_STEP = configBody['OPTIONAL_STEP'];\n\n  // Function for getting random values with probabilities (which is why we have all the numbers\n  // stacked up in the arrays above)\n  const getRandomWithProbability = (array) => {\n    const filled = array.flatMap(([value, prob]) => Array.from({ length: prob }).fill(value));\n    const random = Math.floor(Math.random() * filled.length);\n    return filled[random];\n  }\n  \n  // Function to check if we need to throw an error for a given event\n  const checkIfError = (step) => {\n    var isError = false;\n    var errorName = \"\";\n    ERRORS_WITH_PERCENTAGE.forEach((item) => {\n      if(step == item[1] && getRandomInt([1,100]) < item[2]) {\n        isError = true;\n        errorName = item[0];\n      }\n    })\n  \n    const errorResult = {\n      \"isError\": isError,\n      \"errorName\": errorName\n    }\n    \n    return errorResult;\n  }\n  \n  //Function for getting a random value from an array\n  const getRandomFromArray = (array) => array[Math.floor(Math.random() * array.length)];\n  \n  // Function for getting a random number between 2 integers\n  // The maximum is exclusive and the minimum is inclusive\n  const getRandomInt = ([min, max]) => Math.floor(Math.random() * (max - min) + min);\n\n  const addExtraAttributes = (index, event) => {\n    \n    // Do we add a location?\n    if(LOCATIONS.includes(index) == true) {event['location'] = LOCATION;}\n          \n    // Do we add a segment?\n    if(SEGMENT_INDEX.includes(index) == true) {event[SEGMENT_NAME] = SEGMENT;}\n          \n    // Do we add revenue?\n    if(REVENUE_INDEX.includes(index) == true) {event[REVENUE_NAME] = getRandomInt([REVENUE_MIN,REVENUE_MAX]);}    \n\n    return event;\n  }\n\n  const checkIfOptional = (index) => {\n    if(OPTIONAL_STEP.includes(index) == true) { return OPTIONAL_STEP[1]; } else { return false; }\n  }\n\n  const checkIfLoop = (index) => {\n    if(PROCESS_STEPS[index][5] == true) { return PROCESS_STEPS[index][6]; } else { return false; }\n  }\n  \n  \n  const now = new Date();\n  const nowMinusTwentyFourH = now - (MS_IN_DAY - 300000);\n  const nowMinusFiveM = now - (MS_IN_MINUTE * 5);\n  const nowMinusTwoH = now - (MS_IN_HOUR * 2);\n  const nowPlusTenM = new Date(now + (MS_IN_MINUTE * 10));\n  \n  let flows = [];\n\n  // Run through and create up to 2 events every 5 minutes - this should produce a similar\n  // load profile to carry on what the \"data generator\" did\n  for(let i=0; i<5; i++) {\n\n    // Based on the time of day, choose if an event is going to get generated\n    var rollRandom = getRandomInt([0, 100]);\n    var makeNewEvent = TIMES_OF_DAY[now.getHours()][1] * 10;\n\n   if(rollRandom < makeNewEvent) {\n\n     \n    // Set the high level attributes which will apply across all events\n    // Start time is set here for the first event, then all others are relative to this\n    var LOCATION = getRandomWithProbability(LOCATIONS_WITH_PERCENTAGE);\n    var UID = crypto.randomUUID();\n    var SEGMENT = getRandomWithProbability(SEGMENTS);\n    var HOST = getRandomWithProbability(HOST_ENTITY);\n    var START_TIME = new Date(nowMinusTwentyFourH + (getRandomInt([1, now.getTime() - nowMinusTwentyFourH])));\n    START_TIME.setHours(getRandomWithProbability(TIMES_OF_DAY));\n\n    // If the start time has a chance of being slightly later this hour, then\n    // wind it back 24 hours\n    if(START_TIME.getHours() > now.getHours()) {\n      START_TIME = new Date(START_TIME - MS_IN_DAY);\n    }\n\n     // Keep going until the start time falls in the desired range\n    while (START_TIME > now || START_TIME < nowMinusFiveM) {\n       START_TIME = new Date(nowMinusTwentyFourH + (getRandomInt([1, now - nowMinusTwentyFourH]))); \n\n       if(START_TIME.getHours() > now.getHours()) {\n         START_TIME = START_TIME - MS_IN_DAY;\n       }      \n    }\n    \n    var stop = false;\n\n    // Loop through every step that you've defined, checks will be made for:\n    // 1. Do we need to \"drop off\" based on the probability you defined\n    // 2. Do we need to \"throw an error\" based on the errors defined above and stop\n    PROCESS_STEPS.forEach((item, index) => {\n\n      // If it's the first step, run this loop\n      if(index == 0) {\n        var event = {\n          \"event.provider\": EVENT_PROVIDER,\n          \"event.type\": item[1],\n          [CORRELATION_ID]: UID,\n          \"dt.entity.host\": HOST,\n          \"timestamp\": START_TIME,\n        }\n\n        addExtraAttributes(index, event);\n        \n        stop = false;\n\n        flows.push(event);\n      }\n\n      // If it's the second step, run this loop\n      // Where an event is in the future it will be put under the same event.provider with\n      // \".temp\" added to the end and be picked up by the \"follow-uper\" when the right time comes        \n      else if (index > 0 && getRandomInt([0, 100]) > PROCESS_STEPS[index][2] && stop == false) {\n        \n        START_TIME = new Date(START_TIME.getTime() + getRandomInt([PROCESS_STEPS[index][3] * MS_IN_HOUR, PROCESS_STEPS[index][4] * MS_IN_HOUR]));\n\n        if(START_TIME < now) {\n          var eventType = item[1];\n          stop = false;\n\n          var errorState = checkIfError(index);\n          \n          if(START_TIME > nowMinusTwoH && errorState[\"isError\"] == true) {\n            eventType = item[1] + \".\" + errorState[\"errorName\"];\n            stop = true;\n            \n          }\n          else {\n            stop = false;\n          }\n          \n          var event = {\n            \"event.provider\": EVENT_PROVIDER,\n            \"event.type\": eventType,\n            [CORRELATION_ID]: UID,\n            \"dt.entity.host\": HOST,\n            \"timestamp\": START_TIME\n          }\n\n          addExtraAttributes(index, event);\n          \n          if(checkIfLoop(index) != false) {\n              var numberOfLoops = getRandomInt([1,checkIfLoop(index)+1]);\n              var timestamp;\n              \n              for(var x=0;x<numberOfLoops;x++){\n\n                var maxTime = ((PROCESS_STEPS[index+1][3] * MS_IN_HOUR) * 0.9) + START_TIME.getTime();\n                timestamp = new Date(getRandomInt([6000,(maxTime - START_TIME.getTime())]) + START_TIME.getTime());\n                \n                var loopEvent = {\n                    \"event.provider\": EVENT_PROVIDER,\n                    \"event.type\": eventType,\n                    [CORRELATION_ID]: UID,\n                    \"dt.entity.host\": HOST,\n                    \"timestamp\": timestamp.toISOString()                              \n                }\n                \n                loopEvent = addExtraAttributes(index, loopEvent);\n                \n                if(timestamp > nowPlusTenM) {\n                  console.log(\"It's in the future: \" + UID);\n                  loopEvent[\"timestamp\"] = now.toISOString();\n                  loopEvent[\"future.timestamp\"] = timestamp.toISOString();\n                  loopEvent[\"event.type\"] = eventType;\n                  loopEvent[\"event.provider\"] = EVENT_PROVIDER + \".temp\";\n                }\n                \n                flows.push(loopEvent);\n              }              \n            }            \n            \n            else if(checkIfOptional(index) == false) {\n              flows.push(event);\n            }  \n\n            else if(getRandomInt([0, 100]) < checkIfOptional(index)) {   \n              flows.push(event);  \n            }\n       }   \n       else {\n         var errorState = checkIfError(index);\n         if(errorState[\"isError\"] == true) {\n           eventType = item[1] + '.' + errorState[\"errorName\"];\n           stop = true;\n         }\n         else {\n           eventType = item[1];\n           stop = false;\n         }\n         \n         var event = {\n          \"event.provider\": EVENT_PROVIDER + \".temp\",\n          \"event.type\": eventType,\n          [CORRELATION_ID]: UID,\n          \"dt.entity.host\": HOST,\n          \"future.timestamp\": START_TIME,\n          \"timestamp\": now.toISOString()\n         }\n         \n           addExtraAttributes(index, event);\n\n           if(checkIfLoop(index) != false) {\n              var numberOfLoops = getRandomInt([1,checkIfLoop(index)+1]);\n              var timestamp;\n              \n              for(var x=0;x<numberOfLoops;x++){\n\n                var maxTime = ((PROCESS_STEPS[index+1][3] * MS_IN_HOUR) * 0.9) + START_TIME.getTime();\n                timestamp = new Date(getRandomInt([6000,(maxTime - START_TIME.getTime())]) + START_TIME.getTime());\n\n                var loopEvent = {\n                    \"event.provider\": EVENT_PROVIDER + \".temp\",\n                    \"event.type\": eventType,\n                    [CORRELATION_ID]: UID,\n                    \"dt.entity.host\": HOST,\n                    \"timestamp\": now.toISOString(),\n                    \"future.timestamp\": timestamp.toISOString()\n                }\n\n                loopEvent = addExtraAttributes(index, loopEvent);\n                \n                flows.push(loopEvent);\n              }              \n            }  \n           \n           else if(checkIfOptional(index) == false) {\n             flows.push(event);\n           }  \n\n           else if(getRandomInt([0, 100]) < checkIfOptional(index)) {   \n             flows.push(event);  \n           }\n        }\n       \n      }\n\n      else {\n        stop = true;        \n      }\n      \n    });\n\n   }\n    \n  }\n\n  \n  \n    console.log(\"Sending generated events via API for \" + flows.length + \" flows, size: \" + new Blob([JSON.stringify(flows)]).size + \" bytes.\");\n    \n    const result = await fetch('/platform/classic/environment-api/v2/bizevents/ingest', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(flows),\n    });\n\n    console.log(\"Response from API call:\");\n    console.log(result);\n  \n  return JSON.stringify(flows);\n}\n"
      },
      "active": true,
      "position": {
        "x": 0,
        "y": 2
      },
      "predecessors": [
        "config"
      ],
      "conditions": {
        "states": {
          "config": "OK"
        }
      }
    },
    "check_if_data_exists": {
      "name": "check_if_data_exists",
      "action": "dynatrace.automations:execute-dql-query",
      "description": "Executes DQL query",
      "input": {
        "query": "fetch bizevents\n| filter event.provider == \"{{result('config').EVENT_PROVIDER}}\""
      },
      "active": true,
      "position": {
        "x": -1,
        "y": 2
      },
      "predecessors": [
        "config"
      ],
      "conditions": {
        "states": {
          "config": "OK"
        }
      }
    },
    "generate_historical_data": {
      "name": "generate_historical_data",
      "action": "dynatrace.automations:run-javascript",
      "description": "Build a custom task running js Code",
      "input": {
        "script": "import { execution } from '@dynatrace-sdk/automation-utils';\n\nexport default async function ({ execution_id }) {\n\n  // Variable declaration\n  const configGet = await fetch(`/platform/automation/v1/executions/${execution_id}/tasks/config/result`);\n  const configBody = await configGet.json();\n    \n  const EVENT_PROVIDER = configBody['EVENT_PROVIDER'];\n  const PROCESS_STEPS = configBody['PROCESS_STEPS'];\n  const LOCATIONS_WITH_PERCENTAGE = configBody['LOCATIONS_WITH_PERCENTAGE'];\n  const SEGMENT_INDEX = configBody['SEGMENT'][1];\n  const SEGMENT_NAME = configBody['SEGMENT'][0]; \n  const SEGMENTS = configBody['SEGMENTS'];\n  const HOST_ENTITY = configBody['HOST_ENTITY'];\n  const CORRELATION_ID = configBody['CORRELATION_ID'];\n  const ERRORS_WITH_PERCENTAGE = configBody['ERRORS_WITH_PERCENTAGE'];\n  const TIMES_OF_DAY = configBody['TIMES_OF_DAY']; \n  const LOCATIONS = configBody['LOCATIONS'];\n  const REVENUE_NAME = configBody['REVENUE'][0];\n  const REVENUE_INDEX = configBody['REVENUE'][1];\n  const REVENUE_MIN = configBody['REVENUE'][2];\n  const REVENUE_MAX = configBody['REVENUE'][3];\n  const OPTIONAL_STEP = configBody['OPTIONAL_STEP'];\n\n  // Check if data exists already - if it does, don't run this again\n  const historyGet = await fetch(`/platform/automation/v1/executions/${execution_id}/tasks/check_if_data_exists/result`);\n  const historyBody = await historyGet.json();  \n  var historyCheck = true;\n  \n  if(historyBody.records.length == 0 || historyBody.records.length == undefined) {\n    historyCheck = false;\n  }\n  else {\n    historyCheck = true;\n  }\n\n  // Override if needed, set this to \"false\" if you need to get more historical data\n  // for any reason\n  //historyCheck = false;\n  \n  // Numbers for reference\n  const MS_IN_S = 1000;\n  const MS_IN_MINUTE = 60 * MS_IN_S;\n  const MS_IN_HOUR = 60 * MS_IN_MINUTE;\n  const MS_IN_DAY = 24 * MS_IN_HOUR;\n  \n  // Function for getting random values with probabilities (which is why we have all the numbers\n  // stacked up in the arrays above)\n  const getRandomWithProbability = (array) => {\n    const filled = array.flatMap(([value, prob]) => Array.from({ length: prob }).fill(value));\n    const random = Math.floor(Math.random() * filled.length);\n    return filled[random];\n  }\n  \n  // Function to check if we need to throw an error for a given event\n  const checkIfError = (step) => {\n    var isError = false;\n    var errorName = \"\";\n    ERRORS_WITH_PERCENTAGE.forEach((item) => {\n      if(step == item[1]) {\n        isError = true;\n        errorName = item[0];\n      }\n    })\n  \n    const errorResult = {\n      \"isError\": isError,\n      \"errorName\": errorName\n    }\n    \n    return errorResult;\n  }\n  \n  //Function for getting a random value from an array\n  const getRandomFromArray = (array) => array[Math.floor(Math.random() * array.length)];\n  \n  // Function for getting a random number between 2 integers\n  // The maximum is exclusive and the minimum is inclusive\n  const getRandomInt = ([min, max]) => Math.floor(Math.random() * (max - min) + min);\n\n  const addExtraAttributes = (index, event) => {\n    \n    // Do we add a location?\n    if(LOCATIONS.includes(index) == true) {event['location'] = LOCATION;}\n          \n    // Do we add a segment?\n    if(SEGMENT_INDEX.includes(index) == true) {event[SEGMENT_NAME] = SEGMENT;}\n          \n    // Do we add revenue?\n    if(REVENUE_INDEX.includes(index) == true) {event[REVENUE_NAME] = getRandomInt([REVENUE_MIN,REVENUE_MAX]);}    \n\n    return event;\n  }\n\n  const checkIfOptional = (index) => {\n    if(OPTIONAL_STEP.includes(index) == true) { return OPTIONAL_STEP[1]; } else { return false; }\n  }\n\n  const checkIfLoop = (index) => {\n    if(PROCESS_STEPS[index][5] == true) { return PROCESS_STEPS[index][6]; } else { return false; }\n  }\n\n\n  const now = new Date();\n  const nowMinusTwentyFourH = now - (MS_IN_DAY - 300000);\n  const nowMinusTwoH = now - (MS_IN_HOUR * 2);\n  const nowPlusTenM = new Date(now + (MS_IN_MINUTE * 10));\n\n  console.log(nowMinusTwoH);\n  console.log(nowPlusTenM);\n  \n  let flows = [];\n\n  // Run through and create 500 events over the last 24 hours\n  // If you alter this, make sure to alter the \"follow-uper\"\n  if(historyCheck == false) {\n\n      console.log(\"No existing events detected - generating data for last 24 hours.\");\n    \n      for(let i=0; i<500; i++) {\n  \n      // Set the high level attributes which will apply across all events\n      // Start time is set here for the first event, then all others are relative to this\n      var LOCATION = getRandomWithProbability(LOCATIONS_WITH_PERCENTAGE);\n      var UID = crypto.randomUUID();\n      var SEGMENT = getRandomWithProbability(SEGMENTS);\n      var HOST = getRandomWithProbability(HOST_ENTITY);\n      var START_TIME = new Date(nowMinusTwentyFourH + (getRandomInt([1, now.getTime() - nowMinusTwentyFourH])));\n      START_TIME.setHours(getRandomWithProbability(TIMES_OF_DAY));\n  \n      // If the start time has a chance of being slightly later this hour, then\n      // wind it back 24 hours\n      if(START_TIME.getHours() > now.getHours()) {\n        START_TIME = new Date(START_TIME - MS_IN_DAY);\n      }\n  \n      // Keep going until the start time falls in the desired range\n      while (START_TIME > now || START_TIME < nowMinusTwentyFourH) {\n         START_TIME = new Date(nowMinusTwentyFourH + (getRandomInt([1, now - nowMinusTwentyFourH]))); \n  \n         if(START_TIME.getHours() > now.getHours()) {\n           START_TIME = START_TIME - MS_IN_DAY;\n         }      \n      }\n      \n      var stop = false;\n  \n      // Loop through every step that you've defined, checks will be made for:\n      // 1. Do we need to \"drop off\" based on the probability you defined\n      // 2. Do we need to \"throw an error\" based on the errors defined above and stop\n      PROCESS_STEPS.forEach((item, index) => {\n  \n        // If it's the first step, run this loop\n        if(index == 0) {\n          var event = {\n            \"event.provider\": EVENT_PROVIDER,\n            \"event.type\": item[1],\n            [CORRELATION_ID]: UID,\n            \"dt.entity.host\": HOST,\n            \"timestamp\": START_TIME,\n          }\n          \n          addExtraAttributes(index, event);\n          \n          stop = false;\n\n          flows.push(event);\n        }\n  \n        // If it's the second step, run this loop\n        // Where an event is in the future it will be put under the same event.provider with\n        // \".temp\" added to the end and be picked up by the \"follow-uper\" when the right time comes\n        else if (index > 0 && getRandomInt([0, 100]) > PROCESS_STEPS[index][2] && stop == false) {\n          \n          START_TIME = new Date(START_TIME.getTime() + getRandomInt([PROCESS_STEPS[index][3] * MS_IN_HOUR, PROCESS_STEPS[index][4] * MS_IN_HOUR]));\n  \n          if(START_TIME < now) {\n            var eventType = item[1];\n            stop = false;\n            \n            if(START_TIME > nowMinusTwoH && checkIfError(index)[\"isError\"] == true) {\n              eventType = item[1] + \".\" + checkIfError(index)[\"errorName\"];\n              stop = true;\n            }\n\n            var event = {\n              \"event.provider\": EVENT_PROVIDER,\n              \"event.type\": eventType,\n              [CORRELATION_ID]: UID,\n              \"dt.entity.host\": HOST,\n              \"timestamp\": START_TIME\n            }\n\n            addExtraAttributes(index, event);\n\n            if(checkIfLoop(index) != false) {\n              var numberOfLoops = getRandomInt([1,checkIfLoop(index)+1]);\n              var timestamp;\n              \n              for(var x=0;x<numberOfLoops;x++){\n\n                var maxTime = ((PROCESS_STEPS[index+1][3] * MS_IN_HOUR) * 0.9) + START_TIME.getTime();\n                timestamp = new Date(getRandomInt([6000,(maxTime - START_TIME.getTime())]) + START_TIME.getTime());\n                \n                var loopEvent = {\n                    \"event.provider\": EVENT_PROVIDER,\n                    \"event.type\": eventType,\n                    [CORRELATION_ID]: UID,\n                    \"dt.entity.host\": HOST,\n                    \"timestamp\": timestamp.toISOString()                              \n                }\n                \n                loopEvent = addExtraAttributes(index, loopEvent);\n                \n                if(timestamp > nowPlusTenM) {\n                  loopEvent[\"timestamp\"] = now.toISOString();\n                  loopEvent[\"future.timestamp\"] = timestamp.toISOString();\n                  loopEvent[\"event.type\"] = eventType;\n                  loopEvent[\"event.provider\"] = EVENT_PROVIDER + \".temp\";\n                }\n                \n                flows.push(loopEvent);\n              }              \n            }            \n            \n            else if(checkIfOptional(index) == false) {\n              flows.push(event);\n            }  \n\n            else if(getRandomInt([0, 100]) < checkIfOptional(index)) {   \n              flows.push(event);  \n            }\n\n\n            \n         }   \n         else {\n           var event = {\n            \"event.provider\": EVENT_PROVIDER + \".temp\",\n            \"event.type\": item[1],\n            [CORRELATION_ID]: UID,\n            \"dt.entity.host\": HOST,\n            \"future.timestamp\": START_TIME,\n            \"timestamp\": now.toISOString()\n           }\n           \n           addExtraAttributes(index, event);\n\n            if(checkIfLoop(index) != false) {\n              var numberOfLoops = getRandomInt([1,checkIfLoop(index)+1]);\n              var timestamp;\n              \n              for(var x=0;x<numberOfLoops;x++){\n\n                var maxTime = ((PROCESS_STEPS[index+1][3] * MS_IN_HOUR) * 0.9) + START_TIME.getTime();\n                timestamp = new Date(getRandomInt([6000,(maxTime - START_TIME.getTime())]) + START_TIME.getTime());\n\n                var loopEvent = {\n                    \"event.provider\": EVENT_PROVIDER,\n                    \"event.type\": eventType,\n                    [CORRELATION_ID]: UID,\n                    \"dt.entity.host\": HOST,\n                    \"timestamp\": now.toISOString(),\n                    \"future.timestamp\": timestamp.toISOString()\n                }\n\n                loopEvent = addExtraAttributes(index, loopEvent);\n                \n                flows.push(loopEvent);\n              }              \n            }  \n           \n           else if(checkIfOptional(index) == false) {\n             flows.push(event);\n           }  \n\n           else if(getRandomInt([0, 100]) < checkIfOptional(index)) {   \n             flows.push(event);  \n           }\n        }\n         \n      }\n  \n      else {\n          stop = true;        \n      }\n        \n    });\n      \n    }\n    //Send all the events into the BizEvents API\n\n    console.log(\"Sending generated events via API for \" + flows.length + \" flows, size: \" + new Blob([JSON.stringify(flows)]).size + \" bytes.\");\n    \n    const result = await fetch('/platform/classic/environment-api/v2/bizevents/ingest', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(flows),\n    });\n\n    console.log(\"Response from API call:\");\n    console.log(result);\n  }\n\n  else {\n    console.log(\"Data already exists, skipping data generation.\");\n  }\n\n\n  return;\n}\n"
      },
      "active": true,
      "position": {
        "x": -1,
        "y": 3
      },
      "predecessors": [
        "check_if_data_exists"
      ],
      "conditions": {
        "states": {
          "check_if_data_exists": "OK"
        }
      }
    },
    "process_temporary_events": {
      "name": "process_temporary_events",
      "action": "dynatrace.automations:run-javascript",
      "description": "Build a custom task running js Code",
      "input": {
        "script": "// Import of required SDK modules\nimport { execution } from '@dynatrace-sdk/automation-utils';\nimport { queryExecutionClient } from '@dynatrace-sdk/client-query';\n\n// Numbers for reference\nconst MS_IN_S = 1000;\nconst MS_IN_MINUTE = 60 * MS_IN_S;\nconst MS_IN_HOUR = 60 * MS_IN_MINUTE;\nconst MS_IN_DAY = 24 * MS_IN_HOUR;\n\nexport default async function ({ execution_id }) {\n\n  // Variable declaration\n  const configGet = await fetch(`/platform/automation/v1/executions/${execution_id}/tasks/config/result`);\n  const configBody = await configGet.json();\n    \n  const EVENT_PROVIDER = configBody['EVENT_PROVIDER'];\n  const PROCESS_STEPS = configBody['PROCESS_STEPS'];\n  const CORRELATION_ID = configBody['CORRELATION_ID'];\n  const OPTIONAL_STEP = configBody['OPTIONAL_STEP'][0];\n  \n  const ex = await execution(execution_id);\n\n  // Get the details about what the time is now, we'll use this to calculate\n  // the sliding window that we need to create\n  const now = new Date();\n  const currentS = now.getSeconds();\n  const currentMs = now.getMilliseconds();\n\n  // Create a start timestamp which is 6 minutes ago, and a finish timestamp which is\n  // 1 minute ago (shifted to take off extra seconds/milliseconds)\n  const start = now - (currentS * MS_IN_S) - currentMs - (360 * MS_IN_S);\n  const finish = now - (currentS * MS_IN_S) - currentMs - (60 * MS_IN_S);\n\n  // Query to check in this sliding window for events which need to be processed\n  // into \"permanent\" from the \".temp\" provider\n  var query = 'fetch bizevents, from:-30d | filter event.provider == \"' + EVENT_PROVIDER + '.temp\" | filter toTimestamp(future.timestamp) > toTimestamp(' + start * 1000000 + ') AND toTimestamp(future.timestamp) < toTimestamp(' + finish * 1000000 + ')';\n\n  console.log(query);\n  \n  // Execute the query and get the results back\n  const queryTempRecords = await queryExecutionClient.queryExecute({ body: { query, requestTimeoutMilliseconds: 60 * 1000, fetchTimeoutSeconds: 60  } });\n  const records = queryTempRecords.result.records;\n\n  if(records.length == 0) {\n    console.log(\"No records to process.\");\n    return;\n  }\n\n  else {\n  \n    var events = [];\n    var timestamp = \"\";\n    const nowMinusTwentyFourH = now - (MS_IN_DAY - 300000);\n  \n    var filterText = '| filter in(' + CORRELATION_ID;  \n  \n    console.log(records);\n    \n    // Loop through each of the records and create the permanent event ready to be sent\n    records.forEach((item) => {  \n  \n      filterText = filterText + ',\"' + item[CORRELATION_ID] + '\"';\n  \n      var futureTimestamp = new Date(item[\"future.timestamp\"]);\n  \n      // If the future timestamp attribute is less than 24 hours ago and less than now, then\n      // continue because the API will take it\n      if(futureTimestamp > nowMinusTwentyFourH && futureTimestamp < now) {\n             \n        // Replace the timestamp with the \"future timestamp\" we gave it and \n        // remove unwanted fields\n        timestamp = item[\"future.timestamp\"];\n        item[\"timestamp\"] = timestamp;\n        item[\"event.provider\"] = EVENT_PROVIDER;\n        delete item[\"future.timestamp\"];\n        delete item[\"lookup.timestamp\"];\n        delete item[\"event.id\"];\n        delete item[\"event.kind\"];\n        delete item[\"dt.openpipeline.pipelines\"];\n        delete item[\"dt.openpipeline.source\"];\n  \n        events.push(item);\n      }    \n    })\n  \n    \n    // Create a \"summarize\" statement used for a query below to check for missing events for specific flow.\n    var summaryText = \"| summarize \";\n    \n    for(var i=0;i<PROCESS_STEPS.length;i++) {\n      summaryText = summaryText + PROCESS_STEPS[i][1] + \" = countIf(event.type == \\\"\" + PROCESS_STEPS[i][1] + \"\\\"), \";\n    }\n  \n    summaryText = summaryText + \"by:{\" + CORRELATION_ID + \"}\";\n      \n    \n    \n    \n    // Build a statement which will summarize whether each step has been performed for a given flow.\n    query = 'fetch bizevents, from:-30d | filter event.provider == \"' + EVENT_PROVIDER + '\"' + filterText + ')' + summaryText;\n  \n    console.log(query);\n  \n    const queryPreviousRecords = await queryExecutionClient.queryExecute({ body: { query, requestTimeoutMilliseconds: 60 * 1000, fetchTimeoutSeconds: 60  } });\n    const previousRecords = queryPreviousRecords.result.records;  \n  \n    console.log(previousRecords);\n  \n    var stepNumber;\n    var confirmedEvents = [];\n  \n    // Go through each event that we've just made \"permanent\" and check that there's no missing steps\n    // before the one that we're processing. Events without missing steps will be put into the \n    // \"confirmedEvents\" list to be sent.\n    events.forEach((item) => {  \n  \n      var missingEvent = 0;\n      var stepIndex = 0;\n      \n      for(var i=0;i<PROCESS_STEPS.length;i++){\n        if(PROCESS_STEPS[i][1] == item[\"event.type\"]) {\n          stepIndex = i;\n        }\n      } \n          \n  \n      for(var y=0;y<previousRecords.length;y++){\n        if(previousRecords[y][CORRELATION_ID] == item[CORRELATION_ID]){\n          \n          for(var x=0; x<stepIndex; x++) {\n           \n            if(previousRecords[y][PROCESS_STEPS[x][1]] == 0) {\n  \n              if(x != OPTIONAL_STEP){\n                console.log(\"Step missing:\");\n                missingEvent++;\n                console.log(previousRecords[y]);              \n              }\n            }\n          }\n        }         \n      }\n  \n      if(missingEvent == 0){\n        confirmedEvents.push(item);\n      }\n    })\n  \n    console.log(\"Dropping \" + (events.length - confirmedEvents.length) + \" out of \" + events.length + \" events.\");\n    \n    \n    //Send all the new permanent events into the BizEvents API\n    const result = await fetch('/platform/classic/environment-api/v2/bizevents/ingest', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(confirmedEvents),\n    });\n  \n    console.log(result);\n    \n    return JSON.stringify(confirmedEvents);\n  }  \n}"
      },
      "active": true,
      "position": {
        "x": 1,
        "y": 2
      },
      "predecessors": [
        "config"
      ],
      "conditions": {
        "states": {
          "config": "OK"
        }
      }
    },
    "add_bizflow_template_dashboard": {
      "name": "add_bizflow_template_dashboard",
      "action": "dynatrace.automations:run-javascript",
      "description": "Build a custom task running js Code",
      "input": {
        "script": "import * as AppEnv from '@dynatrace-sdk/app-environment';\nimport { execution } from '@dynatrace-sdk/automation-utils';\nimport { documentsClient } from \"@dynatrace-sdk/client-document\";\n\nexport default async function ({ execution_id }) {\n\n  // Variable declaration\n  const configGet = await fetch(`/platform/automation/v1/executions/${execution_id}/tasks/config/result`);\n  const configBody = await configGet.json();\n\n  const environmentUrl = AppEnv.getEnvironmentUrl();\n  const eventProvider = configBody['EVENT_PROVIDER'];\n  const dashboardExample = configBody['EXAMPLE_DASHBOARD'];\n  const flowName = configBody['FLOW_NAME'];\n  const EXTERNAL_ID = eventProvider.replaceAll(\".\", \"-\") + \"-dashboard\";\n  var bizFlowUrl;\n  var dashboardCheck;\n  \n  // Look for a BizFlow ID coming from the previous step\n  const bizFlowGet = await fetch(`/platform/automation/v1/executions/${execution_id}/tasks/create_bizflow/result`);\n  const bizFlowBody = await bizFlowGet.json();\n\n  // If there is a BizFlow created, construct a URL for the dashboard drilldown.\n  // Otherwise, replace it with a link to install the BizFlow in the Hub.\n  if(JSON.stringify(bizFlowBody) != \"{}\"){\n    bizFlowUrl = environmentUrl + \"/ui/apps/dynatrace.biz.flow/analyze/\" + bizFlowBody;\n    console.log(\"Biz flow has been created, making proper URL: \" + bizFlowUrl);\n  }\n  else {\n    bizFlowUrl = environmentUrl + \"/ui/apps/dynatrace.hub/browse?details=dynatrace.biz.flow\";\n    console.log(\"Biz flow not created (probably not installed), replacing with link to Hub.\");\n  }\n  \n  // Check if the dashboard already exists (defined by the \"externalId\")\n  const dashboardGet = await documentsClient.listDocuments({\n    filter: \"externalId == '\" + EXTERNAL_ID + \"'\"\n  });\n  if(dashboardGet.documents.length == 0){\n    dashboardCheck = false;\n  }\n  else {\n    dashboardCheck = true;\n  }\n\n  // Raw dashboard JSON\n  var dashboardJson = {\n    \"version\": 15,\n    \"variables\": [],\n    \"tiles\": {\n        \"0\": {\n            \"type\": \"markdown\",\n            \"title\": \"\",\n            \"content\": \"## 💻 Online order\\n---\\n💼 Business KPI = Average order value.\"\n        },\n        \"1\": {\n            \"type\": \"markdown\",\n            \"title\": \"\",\n            \"content\": \"## ⚙️ Orders processed\\n---\\n💼 Business KPI = Time from receiving an order to picking it (90th percentile).\"\n        },\n        \"2\": {\n            \"type\": \"markdown\",\n            \"title\": \"\",\n            \"content\": \"## 🏭 Warehouse\\n---\\n💼 Business KPI = Percentage change in orders packed in the last hour vs. same time yesterday.\"\n        },\n        \"3\": {\n            \"type\": \"markdown\",\n            \"title\": \"\",\n            \"content\": \"## 🚚 Shipping\\n---\\n💼 Business KPI = Order shipping success rate.\"\n        },\n        \"4\": {\n            \"type\": \"markdown\",\n            \"title\": \"\",\n            \"content\": \"## 📦 Delivery\\n---\\n💼 Business KPI = Delivery time for \\\"Gold\\\" users.\"\n        },\n        \"6\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// The two main ways to achieve this number are:\\n// - Query Davis events and filter by the services/entities known to power this part of the journey.\\n// - Using a topology lookup:\\n//   - Get Biz Events related to this step.\\n//   - \\\"Lookup\\\" the Spans using the trace ID.\\n//   - Collect a \\\"Distinct\\\" list of the Services.\\n//   - \\\"Lookup\\\" any Davis events related to those Services.\\nfetch bizevents\\n| fieldsAdd problemExample = 0\\n| limit 1\",\n            \"davis\": {\n                \"enabled\": false,\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"singleValue\",\n            \"visualizationSettings\": {\n                \"thresholds\": [\n                    {\n                        \"id\": 1,\n                        \"field\": \"problemExample\",\n                        \"title\": \"Open Problems\",\n                        \"isEnabled\": true,\n                        \"rules\": [\n                            {\n                                \"id\": 0,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-categorical-themed-fireplace-color-01-default, #ae132d)\"\n                                },\n                                \"comparator\": \"≥\",\n                                \"label\": \"\",\n                                \"value\": 1\n                            },\n                            {\n                                \"id\": 2,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-vulnerability-status-resolved-default, #3e8e6a)\"\n                                },\n                                \"comparator\": \"≥\",\n                                \"label\": \"\",\n                                \"value\": 0\n                            }\n                        ]\n                    }\n                ],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {},\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxis\": \"dt.entity.host\",\n                        \"valueAxis\": \"problemExample\",\n                        \"categoryAxisLabel\": \"dt.entity.host\",\n                        \"valueAxisLabel\": \"problemExample\"\n                    },\n                    \"fieldMapping\": {\n                        \"timestamp\": \"timestamp\",\n                        \"leftAxisValues\": [\n                            \"problemExample\"\n                        ],\n                        \"leftAxisDimensions\": [\n                            \"dt.entity.host\"\n                        ]\n                    },\n                    \"hiddenLegendFields\": []\n                },\n                \"singleValue\": {\n                    \"showLabel\": true,\n                    \"label\": \"🛠️ IT ISSUES\",\n                    \"prefixIcon\": \"\",\n                    \"autoscale\": true,\n                    \"sparklineSettings\": {\n                        \"isVisible\": false\n                    },\n                    \"alignment\": \"center\",\n                    \"trend\": {\n                        \"isVisible\": false\n                    },\n                    \"colorThresholdTarget\": \"background\",\n                    \"recordField\": \"problemExample\"\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {\n                        \"category\": \"dt.entity.host\",\n                        \"value\": \"timestamp\"\n                    },\n                    \"legend\": \"auto\"\n                },\n                \"histogram\": {\n                    \"dataMappings\": [\n                        {\n                            \"valueAxis\": \"problemExample\",\n                            \"rangeAxis\": \"\"\n                        }\n                    ]\n                }\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"11\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// Real example from the data of the average order value split by loyalty.\\nfetch bizevents\\n| filter event.provider == \\\"\" + eventProvider + \"\\\" and event.type == \\\"place.order\\\"\\n| summarize `Number of bookings` = count(), by:{loyalty}\",\n            \"davis\": {\n                \"enabled\": false,\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"donutChart\",\n            \"visualizationSettings\": {\n                \"thresholds\": [],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\",\n                        \"showTotalValue\": true,\n                        \"hideLabels\": false\n                    },\n                    \"categoryOverrides\": {\n                        \"basic\": {\n                            \"color\": \"var(--dt-colors-charts-categorical-color-02-default, #2c2f3f)\",\n                            \"added\": 1719589867351\n                        },\n                        \"bronze\": {\n                            \"color\": \"var(--dt-colors-charts-categorical-color-10-default, #904523)\",\n                            \"added\": 1719589872753\n                        },\n                        \"gold\": {\n                            \"color\": \"var(--dt-colors-charts-categorical-color-06-default, #a9780f)\",\n                            \"added\": 1719589878838\n                        },\n                        \"silver\": {\n                            \"color\": \"var(--dt-colors-charts-categorical-color-05-default, #84859a)\",\n                            \"added\": 1719589883851\n                        }\n                    },\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxis\": \"loyalty\",\n                        \"categoryAxisLabel\": \"loyalty\",\n                        \"valueAxis\": \"Number of bookings\",\n                        \"valueAxisLabel\": \"Number of bookings\",\n                        \"layout\": \"horizontal\"\n                    },\n                    \"legend\": {\n                        \"hidden\": true\n                    },\n                    \"colorPalette\": \"blue-steel\",\n                    \"hiddenLegendFields\": []\n                },\n                \"singleValue\": {\n                    \"showLabel\": true,\n                    \"label\": \"\",\n                    \"prefixIcon\": \"\",\n                    \"autoscale\": true,\n                    \"alignment\": \"center\",\n                    \"recordField\": \"searchTerm\"\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {\n                        \"category\": \"loyalty\",\n                        \"value\": \"Number of bookings\"\n                    },\n                    \"legend\": \"auto\"\n                },\n                \"histogram\": {\n                    \"dataMappings\": [\n                        {\n                            \"valueAxis\": \"Number of bookings\",\n                            \"rangeAxis\": \"\"\n                        }\n                    ]\n                },\n                \"unitsOverrides\": [\n                    {\n                        \"identifier\": \"Number of bookings\",\n                        \"unitCategory\": \"unspecified\",\n                        \"baseUnit\": \"none\",\n                        \"displayUnit\": null,\n                        \"decimals\": 2,\n                        \"suffix\": \"\",\n                        \"delimiter\": false,\n                        \"added\": 1719589709341\n                    }\n                ]\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"13\": {\n            \"type\": \"markdown\",\n            \"title\": \"\",\n            \"content\": \"Drilldown: [IT](\" + environmentUrl + \"/ui/apps/dynatrace.classic.problems/ui/problems) | [Security](\" + environmentUrl + \"/ui/apps/dynatrace.classic.vulnerabilities/ui/security/vulnerabilities) | [Carbon](\" + environmentUrl + \"/ui/apps/dynatrace.biz.carbon/) | [Business](https://www.dynatrace.com/company/dynatrace-for-executives/#02-business-analytics)\"\n        },\n        \"14\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// Real example from the data of the average order value.\\nfetch bizevents\\n| filter event.provider == \\\"\" + eventProvider + \"\\\" and event.type == \\\"place.order\\\"\\n| makeTimeseries averageOrderValue = avg(order.value), bins:50\",\n            \"davis\": {\n                \"enabled\": true,\n                \"componentState\": {\n                    \"selectedAnalyzerName\": \"dt.statistics.ui.anomaly_detection.AutoAdaptiveAnomalyDetectionAnalyzer\",\n                    \"inputData\": {\n                        \"dt.statistics.ui.anomaly_detection.AutoAdaptiveAnomalyDetectionAnalyzer\": {\n                            \"generalParameters\": {\n                                \"timeframe\": {\n                                    \"startTime\": \"2024-06-30T13:00:26.303Z\",\n                                    \"endTime\": \"2024-07-01T13:00:26.303Z\"\n                                },\n                                \"resolveDimensionalQueryData\": true,\n                                \"logVerbosity\": \"INFO\"\n                            },\n                            \"numberOfSignalFluctuations\": 1,\n                            \"alertCondition\": \"OUTSIDE\",\n                            \"alertOnMissingData\": false,\n                            \"violatingSamples\": 2,\n                            \"slidingWindow\": 5,\n                            \"dealertingSamples\": 5,\n                            \"query\": \"// Real example from the data of the average order value.\\nfetch bizevents\\n| filter event.provider == \\\"\" + eventProvider + \"\\\" and event.type == \\\"place.order\\\"\\n| makeTimeseries averageOrderValue = avg(order.value), bins:50\"\n                        }\n                    }\n                },\n                \"davisVisualization\": {\n                    \"isAvailable\": true,\n                    \"settings\": {\n                        \"visibleSections\": \"VISUALIZATION\"\n                    }\n                }\n            },\n            \"visualization\": \"davis\",\n            \"visualizationSettings\": {\n                \"thresholds\": [\n                    {\n                        \"id\": 1,\n                        \"field\": \"Top 5?\",\n                        \"title\": \"\",\n                        \"isEnabled\": false,\n                        \"rules\": [\n                            {\n                                \"id\": 0,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-categorical-color-09-default, #649438)\"\n                                },\n                                \"comparator\": \"≥\",\n                                \"label\": \"\"\n                            },\n                            {\n                                \"id\": 1,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)\"\n                                },\n                                \"comparator\": \"≥\",\n                                \"label\": \"\"\n                            },\n                            {\n                                \"id\": 2,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-categorical-color-12-default, #cd3741)\"\n                                },\n                                \"comparator\": \"≥\",\n                                \"label\": \"\",\n                                \"value\": 1\n                            }\n                        ]\n                    }\n                ],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {},\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxisLabel\": \"customer.id\",\n                        \"valueAxisLabel\": \"booking.value\",\n                        \"layout\": \"horizontal\"\n                    },\n                    \"legend\": {\n                        \"hidden\": true\n                    },\n                    \"fieldMapping\": {\n                        \"timestamp\": \"timeframe\",\n                        \"leftAxisValues\": [\n                            \"averageOrderValue\"\n                        ],\n                        \"leftAxisDimensions\": []\n                    },\n                    \"hiddenLegendFields\": []\n                },\n                \"singleValue\": {\n                    \"showLabel\": true,\n                    \"label\": \"\",\n                    \"prefixIcon\": \"\",\n                    \"autoscale\": true,\n                    \"alignment\": \"center\",\n                    \"recordField\": \"Search term\"\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {},\n                    \"legend\": \"auto\"\n                },\n                \"histogram\": {\n                    \"dataMappings\": [\n                        {\n                            \"valueAxis\": \"interval\",\n                            \"rangeAxis\": \"\"\n                        }\n                    ]\n                }\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"15\": {\n            \"type\": \"markdown\",\n            \"title\": \"\",\n            \"content\": \"### Orders by loyalty tier\\n---\\nHow many unique bookings were made, and by what tier of user.\"\n        },\n        \"16\": {\n            \"type\": \"markdown\",\n            \"title\": \"\",\n            \"content\": \"### Average order size\\n---\\nValue over time, Davis highlights where the value is higher or lower than expected.\"\n        },\n        \"17\": {\n            \"type\": \"markdown\",\n            \"title\": \"\",\n            \"content\": \"### Time to pick items\\n---\\n90th percentile of time taken from receiving order to picking first item.\"\n        },\n        \"18\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// The two main ways to achieve this number are:\\n// - Query Security events and filter by the services/entities known to power this part of the journey.\\n// - Using a topology lookup:\\n//   - Get Biz Events related to this step.\\n//   - \\\"Lookup\\\" the Spans using the trace ID.\\n//   - Collect a \\\"Distinct\\\" list of the Services.\\n//   - \\\"Lookup\\\" any Security events related to those Services.\\nfetch bizevents\\n| fieldsAdd securityExample = \\\"4/10\\\"\\n| limit 1\",\n            \"davis\": {\n                \"enabled\": false,\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"singleValue\",\n            \"visualizationSettings\": {\n                \"thresholds\": [\n                    {\n                        \"id\": 1,\n                        \"field\": \"securityExample\",\n                        \"title\": \"Security score\",\n                        \"isEnabled\": true,\n                        \"rules\": [\n                            {\n                                \"id\": 1,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-apdex-excellent-default, #2a7453)\"\n                                },\n                                \"comparator\": \"=\",\n                                \"label\": \"\",\n                                \"value\": \"4/10\"\n                            }\n                        ]\n                    }\n                ],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {},\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxisLabel\": \"securityExample\",\n                        \"valueAxisLabel\": \"account.fee\",\n                        \"categoryAxis\": \"securityExample\",\n                        \"valueAxis\": \"account.fee\"\n                    },\n                    \"hiddenLegendFields\": [],\n                    \"fieldMapping\": {\n                        \"timestamp\": \"timestamp\",\n                        \"leftAxisValues\": [\n                            \"account.fee\"\n                        ],\n                        \"leftAxisDimensions\": [\n                            \"securityExample\"\n                        ]\n                    }\n                },\n                \"singleValue\": {\n                    \"showLabel\": true,\n                    \"label\": \"🔒 SECURITY\",\n                    \"prefixIcon\": \"\",\n                    \"autoscale\": true,\n                    \"alignment\": \"center\",\n                    \"colorThresholdTarget\": \"background\",\n                    \"recordField\": \"securityExample\"\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {\n                        \"category\": \"securityExample\",\n                        \"value\": \"timestamp\"\n                    },\n                    \"legend\": \"auto\"\n                },\n                \"histogram\": {\n                    \"dataMappings\": []\n                }\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"22\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// Real example from the data, of the average time to start picking an order.\\nfetch bizevents\\n| filter event.provider == \\\"\" + eventProvider + \"\\\" \\n| filter event.type == \\\"warehouse.received\\\" or event.type == \\\"item.picked\\\"\\n| sort timestamp asc\\n| fieldsAdd receiveTime = if(event.type == \\\"warehouse.received\\\", timestamp), pickTime = if(event.type == \\\"item.picked\\\", timestamp)\\n| summarize firstReceive = takeFirst(receiveTime), firstPick = takeFirst(pickTime), by:{order.id}\\n| filterOut isNull(firstReceive) or isNull(firstPick)\\n| fieldsAdd timeToPick = firstPick - firstReceive\\n| makeTimeseries ninetyTimeToPick = percentile(timeToPick, 90), time:firstPick, bins:50\",\n            \"davis\": {\n                \"enabled\": false,\n                \"componentState\": {\n                    \"selectedAnalyzerName\": \"dt.statistics.ui.anomaly_detection.AutoAdaptiveAnomalyDetectionAnalyzer\",\n                    \"inputData\": {\n                        \"dt.statistics.ui.anomaly_detection.AutoAdaptiveAnomalyDetectionAnalyzer\": {\n                            \"generalParameters\": {\n                                \"timeframe\": {\n                                    \"startTime\": \"2024-06-27T14:11:35.440Z\",\n                                    \"endTime\": \"2024-06-28T14:11:35.440Z\"\n                                },\n                                \"resolveDimensionalQueryData\": true,\n                                \"logVerbosity\": \"INFO\"\n                            },\n                            \"numberOfSignalFluctuations\": 1,\n                            \"alertCondition\": \"OUTSIDE\",\n                            \"alertOnMissingData\": false,\n                            \"violatingSamples\": 3,\n                            \"slidingWindow\": 5,\n                            \"dealertingSamples\": 5,\n                            \"query\": \"// Real example from the data, of the average time to start picking an order.\\nfetch bizevents\\n| filter event.provider == \\\"\" + eventProvider + \"\\\" \\n| filter event.type == \\\"warehouse.received\\\" or event.type == \\\"item.picked\\\"\\n| sort timestamp asc\\n| fieldsAdd receiveTime = if(event.type == \\\"warehouse.received\\\", timestamp), pickTime = if(event.type == \\\"item.picked\\\", timestamp)\\n| summarize firstReceive = takeFirst(receiveTime), firstPick = takeFirst(pickTime), by:{order.id}\\n| filterOut isNull(firstReceive) or isNull(firstPick)\\n| fieldsAdd timeToPick = firstPick - firstReceive\\n| makeTimeseries ninetyTimeToPick = percentile(timeToPick, 90), time:firstPick, bins:50\"\n                        }\n                    }\n                },\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"lineChart\",\n            \"visualizationSettings\": {\n                \"thresholds\": [\n                    {\n                        \"id\": 1,\n                        \"field\": \"\",\n                        \"title\": \"\",\n                        \"isEnabled\": true,\n                        \"rules\": [\n                            {\n                                \"id\": 0,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-categorical-color-09-default, #649438)\"\n                                },\n                                \"comparator\": \"≥\",\n                                \"label\": \"\"\n                            },\n                            {\n                                \"id\": 1,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)\"\n                                },\n                                \"comparator\": \"≥\",\n                                \"label\": \"\"\n                            },\n                            {\n                                \"id\": 2,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-categorical-color-12-default, #cd3741)\"\n                                },\n                                \"comparator\": \"≥\",\n                                \"label\": \"\"\n                            }\n                        ]\n                    }\n                ],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {},\n                    \"legend\": {\n                        \"hidden\": true\n                    },\n                    \"seriesOverrides\": [\n                        {\n                            \"seriesId\": [\n                                \"fail\"\n                            ],\n                            \"override\": {\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-loglevel-emergency-default, #9033a3)\"\n                                }\n                            }\n                        },\n                        {\n                            \"seriesId\": [\n                                \"pass\"\n                            ],\n                            \"override\": {\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-apdex-excellent-default, #2a7453)\"\n                                }\n                            }\n                        },\n                        {\n                            \"seriesId\": [\n                                \"failedLogins\"\n                            ],\n                            \"override\": {\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-security-risk-level-critical-default, #8a0012)\"\n                                }\n                            }\n                        },\n                        {\n                            \"seriesId\": [\n                                \"successfulLogins\"\n                            ],\n                            \"override\": {\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-vulnerability-status-resolved-default, #3e8e6a)\"\n                                }\n                            }\n                        }\n                    ],\n                    \"colorPalette\": \"categorical\",\n                    \"fieldMapping\": {\n                        \"timestamp\": \"timeframe\",\n                        \"leftAxisValues\": [\n                            \"ninetyTimeToPick\"\n                        ],\n                        \"leftAxisDimensions\": []\n                    },\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxisLabel\": \"event.type\",\n                        \"valueAxisLabel\": \"number\"\n                    },\n                    \"hiddenLegendFields\": []\n                },\n                \"singleValue\": {\n                    \"showLabel\": false,\n                    \"label\": \"\",\n                    \"prefixIcon\": \"\",\n                    \"autoscale\": true,\n                    \"alignment\": \"center\",\n                    \"recordField\": \"single\"\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {},\n                    \"legend\": \"auto\"\n                },\n                \"histogram\": {\n                    \"dataMappings\": [\n                        {\n                            \"valueAxis\": \"interval\",\n                            \"rangeAxis\": \"\"\n                        }\n                    ]\n                },\n                \"unitsOverrides\": [\n                    {\n                        \"identifier\": \"ninetyTimeToPick\",\n                        \"unitCategory\": \"time\",\n                        \"baseUnit\": \"nanosecond\",\n                        \"displayUnit\": null,\n                        \"decimals\": 0,\n                        \"suffix\": \"\",\n                        \"delimiter\": false,\n                        \"added\": 1717151082207\n                    }\n                ]\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"23\": {\n            \"type\": \"markdown\",\n            \"title\": \"\",\n            \"content\": \"### Average order items per city\\n---\\nAverage number of items in an order broken down by each location.\"\n        },\n        \"24\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// Real example from the data of the number of items per order, per location. In this example we need to take data from a different event to get the order location.\\nfetch bizevents\\n| filter event.provider == \\\"\" + eventProvider + \"\\\" \\n| filter event.type == \\\"warehouse.received\\\" or event.type == \\\"item.picked\\\"\\n| summarize numberOfItems = countIf(event.type == \\\"item.picked\\\"), location = takeAny(location), by:{order.id}\\n| summarize averageItems = toDouble(avg(numberOfItems)), by:{location}\\n| filter location != \\\"\\\"\\n| sort averageItems desc\",\n            \"davis\": {\n                \"enabled\": false,\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"categoricalBarChart\",\n            \"visualizationSettings\": {\n                \"thresholds\": [\n                    {\n                        \"id\": 1,\n                        \"field\": \"single\",\n                        \"title\": \"\",\n                        \"isEnabled\": true,\n                        \"rules\": [\n                            {\n                                \"id\": 0,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-categorical-color-09-default, #649438)\"\n                                },\n                                \"comparator\": \"≥\",\n                                \"label\": \"\"\n                            },\n                            {\n                                \"id\": 1,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)\"\n                                },\n                                \"comparator\": \"≥\",\n                                \"label\": \"\"\n                            },\n                            {\n                                \"id\": 2,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-categorical-color-12-default, #cd3741)\"\n                                },\n                                \"comparator\": \"≥\",\n                                \"label\": \"\"\n                            }\n                        ]\n                    }\n                ],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\",\n                        \"showTotalValue\": true\n                    },\n                    \"categoryOverrides\": {},\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxisLabel\": \"location\",\n                        \"valueAxisLabel\": \"averageItems\",\n                        \"categoryAxis\": \"location\",\n                        \"valueAxis\": \"averageItems\",\n                        \"layout\": \"horizontal\"\n                    },\n                    \"legend\": {\n                        \"hidden\": true\n                    },\n                    \"hiddenLegendFields\": []\n                },\n                \"singleValue\": {\n                    \"showLabel\": false,\n                    \"label\": \"\",\n                    \"prefixIcon\": \"\",\n                    \"autoscale\": true,\n                    \"alignment\": \"center\",\n                    \"recordField\": \"single\",\n                    \"trend\": {\n                        \"isInverseTrend\": true\n                    }\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"hexagon\",\n                    \"dataMappings\": {\n                        \"category\": \"location\",\n                        \"value\": \"averageItems\"\n                    },\n                    \"legend\": \"right\"\n                },\n                \"histogram\": {\n                    \"dataMappings\": [\n                        {\n                            \"valueAxis\": \"averageItems\",\n                            \"rangeAxis\": \"\"\n                        }\n                    ]\n                },\n                \"unitsOverrides\": []\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"25\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// This number obviously requires the Carbon app to be installed. An example way to calculate the footprint for part of the journey is:\\n// - Fetch the Biz Events related to this part of the journey.\\n// - Collect a \\\"Distinct\\\" list of the Hosts those Biz Events come from.\\n// - \\\"Lookup\\\" the Carbon events related to those hosts.\\n// - (Optional) If there's lots of shared infrastructure, you can go one step further and use the Process CPU to distribute Carbon to the specific Processes in use.\\nfetch bizevents\\n| fieldsAdd carbonExample = 452\\n| limit 1\",\n            \"davis\": {\n                \"enabled\": false,\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"singleValue\",\n            \"visualizationSettings\": {\n                \"thresholds\": [\n                    {\n                        \"id\": 1,\n                        \"field\": \"carbonExample\",\n                        \"title\": \"Carbon footprint\",\n                        \"isEnabled\": true,\n                        \"rules\": [\n                            {\n                                \"id\": 0,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-apdex-excellent-default, #2a7453)\"\n                                },\n                                \"comparator\": \"<\",\n                                \"label\": \"\",\n                                \"value\": 1000\n                            }\n                        ]\n                    }\n                ],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {},\n                    \"fieldMapping\": {\n                        \"timestamp\": \"timestamp\",\n                        \"leftAxisValues\": [\n                            \"carbonExample\"\n                        ],\n                        \"leftAxisDimensions\": [\n                            \"dt.entity.host\"\n                        ]\n                    },\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxis\": \"dt.entity.host\",\n                        \"valueAxis\": \"carbonExample\",\n                        \"categoryAxisLabel\": \"dt.entity.host\",\n                        \"valueAxisLabel\": \"carbonExample\"\n                    },\n                    \"hiddenLegendFields\": []\n                },\n                \"singleValue\": {\n                    \"showLabel\": true,\n                    \"label\": \"🌳 CARBON\",\n                    \"autoscale\": true,\n                    \"sparklineSettings\": {\n                        \"isVisible\": false,\n                        \"showTicks\": true\n                    },\n                    \"alignment\": \"center\",\n                    \"trend\": {\n                        \"isVisible\": true,\n                        \"isRelative\": true,\n                        \"isInverseTrend\": true\n                    },\n                    \"recordField\": \"carbonExample\",\n                    \"colorThresholdTarget\": \"background\"\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {\n                        \"category\": \"dt.entity.host\",\n                        \"value\": \"timestamp\"\n                    },\n                    \"legend\": \"auto\"\n                },\n                \"unitsOverrides\": [\n                    {\n                        \"identifier\": \"carbonExample\",\n                        \"unitCategory\": \"mass\",\n                        \"baseUnit\": \"kilogram\",\n                        \"displayUnit\": \"kilogram\",\n                        \"decimals\": 0,\n                        \"suffix\": \"\",\n                        \"delimiter\": false,\n                        \"added\": 1703159936837\n                    }\n                ],\n                \"histogram\": {\n                    \"dataMappings\": [\n                        {\n                            \"valueAxis\": \"carbonExample\",\n                            \"rangeAxis\": \"\"\n                        }\n                    ]\n                }\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"26\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// Real example from the data of the average order value.\\nfetch bizevents\\n| filter event.provider == \\\"\" + eventProvider + \"\\\" and event.type == \\\"place.order\\\"\\n| summarize averageOrderValue = avg(order.value)\",\n            \"davis\": {\n                \"enabled\": false,\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"singleValue\",\n            \"visualizationSettings\": {\n                \"thresholds\": [\n                    {\n                        \"id\": 1,\n                        \"field\": \"averageOrderValue\",\n                        \"title\": \"Average order value\",\n                        \"isEnabled\": true,\n                        \"rules\": [\n                            {\n                                \"id\": 2,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-vulnerability-status-resolved-default, #3e8e6a)\"\n                                },\n                                \"comparator\": \"≥\",\n                                \"label\": \"\",\n                                \"value\": 500\n                            }\n                        ]\n                    }\n                ],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {},\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxisLabel\": \"customer.id\",\n                        \"valueAxisLabel\": \"test\"\n                    },\n                    \"hiddenLegendFields\": []\n                },\n                \"singleValue\": {\n                    \"showLabel\": true,\n                    \"label\": \"💼 BUSINESS KPI\",\n                    \"prefixIcon\": \"\",\n                    \"autoscale\": true,\n                    \"sparklineSettings\": {\n                        \"isVisible\": false\n                    },\n                    \"alignment\": \"center\",\n                    \"trend\": {\n                        \"isVisible\": false\n                    },\n                    \"colorThresholdTarget\": \"background\",\n                    \"recordField\": \"averageOrderValue\"\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {},\n                    \"legend\": \"auto\"\n                },\n                \"histogram\": {\n                    \"dataMappings\": [\n                        {\n                            \"valueAxis\": \"averageOrderValue\",\n                            \"rangeAxis\": \"\"\n                        }\n                    ]\n                },\n                \"unitsOverrides\": [\n                    {\n                        \"identifier\": \"averageOrderValue\",\n                        \"unitCategory\": \"currency\",\n                        \"baseUnit\": \"usd\",\n                        \"displayUnit\": null,\n                        \"decimals\": 2,\n                        \"suffix\": \"\",\n                        \"delimiter\": true,\n                        \"added\": 1717148328781\n                    }\n                ]\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"28\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// Real example from the data, of the average time to start picking an order.\\nfetch bizevents\\n| filter event.provider == \\\"\" + eventProvider + \"\\\" \\n| filter event.type == \\\"warehouse.received\\\" or event.type == \\\"item.picked\\\"\\n| sort timestamp asc\\n| fieldsAdd receiveTime = if(event.type == \\\"warehouse.received\\\", timestamp), pickTime = if(event.type == \\\"item.picked\\\", timestamp)\\n| summarize firstReceive = takeFirst(receiveTime), firstPick = takeFirst(pickTime), by:{order.id}\\n| filterOut isNull(firstReceive) or isNull(firstPick)\\n| fieldsAdd timeToPick = firstPick - firstReceive\\n| summarize ninetyPercentile = percentile(timeToPick, 90)\",\n            \"davis\": {\n                \"enabled\": false,\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"singleValue\",\n            \"visualizationSettings\": {\n                \"thresholds\": [\n                    {\n                        \"id\": 1,\n                        \"field\": \"ninetyPercentile\",\n                        \"title\": \"90th percentile time to pick\",\n                        \"isEnabled\": true,\n                        \"rules\": [\n                            {\n                                \"id\": 2,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-apdex-excellent-default, #2a7453)\"\n                                },\n                                \"comparator\": \"<\",\n                                \"label\": \"\",\n                                \"value\": 3600000000000\n                            }\n                        ]\n                    }\n                ],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {},\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxisLabel\": \"dt.entity.host\",\n                        \"valueAxisLabel\": \"job.fee\"\n                    },\n                    \"hiddenLegendFields\": []\n                },\n                \"singleValue\": {\n                    \"showLabel\": true,\n                    \"label\": \"💼 BUSINESS KPI\",\n                    \"prefixIcon\": \"\",\n                    \"autoscale\": true,\n                    \"sparklineSettings\": {\n                        \"isVisible\": false\n                    },\n                    \"alignment\": \"center\",\n                    \"trend\": {\n                        \"isVisible\": false\n                    },\n                    \"colorThresholdTarget\": \"background\",\n                    \"recordField\": \"ninetyPercentile\"\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {},\n                    \"legend\": \"auto\"\n                },\n                \"unitsOverrides\": [\n                    {\n                        \"identifier\": \"ninetyPercentile\",\n                        \"unitCategory\": \"time\",\n                        \"baseUnit\": \"nanosecond\",\n                        \"displayUnit\": null,\n                        \"decimals\": 0,\n                        \"suffix\": \"\",\n                        \"delimiter\": true,\n                        \"added\": 1703163062500\n                    }\n                ],\n                \"histogram\": {\n                    \"dataMappings\": [\n                        {\n                            \"valueAxis\": \"ninetyPercentile\",\n                            \"rangeAxis\": \"\"\n                        }\n                    ]\n                }\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"31\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// Real example of doing a lookup to compare against the number of orders packed last week, for the same hour.\\nfetch bizevents, from: -1h\\n| filter event.provider == \\\"\" + eventProvider + \"\\\" and event.type == \\\"order.packed\\\"\\n| summarize ordersPackedNow = count(), by:{event.type}\\n| lookup [fetch bizevents, from: -1d-1h, to:-1d | filter event.provider == \\\"\" + eventProvider + \"\\\" and event.type == \\\"order.packed\\\" | summarize ordersPackedLastWeek = count(), by:{event.type} ], sourceField:event.type, lookupField:event.type\\n| fieldsAdd percentageChange = ((toDouble(lookup.ordersPackedLastWeek) - toDouble(ordersPackedNow)) / toDouble(ordersPackedNow)) * 100\",\n            \"davis\": {\n                \"enabled\": false,\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"singleValue\",\n            \"visualizationSettings\": {\n                \"thresholds\": [\n                    {\n                        \"id\": 1,\n                        \"field\": \"percentageChange\",\n                        \"title\": \"Changes in orders being packed\",\n                        \"isEnabled\": true,\n                        \"rules\": [\n                            {\n                                \"id\": 0,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-vulnerability-status-resolved-default, #3e8e6a)\"\n                                },\n                                \"comparator\": \"≥\",\n                                \"label\": \"\",\n                                \"value\": -10\n                            },\n                            {\n                                \"id\": 1,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-loglevel-emergency-default, #9033a3)\"\n                                },\n                                \"comparator\": \"<\",\n                                \"label\": \"\",\n                                \"value\": -10\n                            }\n                        ]\n                    }\n                ],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {},\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxis\": \"event.type\",\n                        \"valueAxis\": \"ordersPackedNow\",\n                        \"categoryAxisLabel\": \"event.type\",\n                        \"valueAxisLabel\": \"ordersPackedNow\"\n                    },\n                    \"hiddenLegendFields\": []\n                },\n                \"singleValue\": {\n                    \"showLabel\": true,\n                    \"label\": \"💼 BUSINESS KPI\",\n                    \"prefixIcon\": \"\",\n                    \"autoscale\": true,\n                    \"sparklineSettings\": {\n                        \"isVisible\": false\n                    },\n                    \"alignment\": \"center\",\n                    \"trend\": {\n                        \"isVisible\": false\n                    },\n                    \"recordField\": \"percentageChange\",\n                    \"colorThresholdTarget\": \"background\"\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {\n                        \"category\": \"event.type\",\n                        \"value\": \"ordersPackedNow\"\n                    },\n                    \"legend\": \"auto\"\n                },\n                \"unitsOverrides\": [\n                    {\n                        \"identifier\": \"percentageChange\",\n                        \"unitCategory\": \"percentage\",\n                        \"baseUnit\": \"percent\",\n                        \"displayUnit\": null,\n                        \"decimals\": 2,\n                        \"suffix\": \"\",\n                        \"delimiter\": true,\n                        \"added\": 1703100953267\n                    }\n                ],\n                \"histogram\": {\n                    \"dataMappings\": [\n                        {\n                            \"valueAxis\": \"ordersPackedNow\",\n                            \"rangeAxis\": \"\"\n                        },\n                        {\n                            \"valueAxis\": \"lookup.ordersPackedLastWeek\",\n                            \"rangeAxis\": \"\"\n                        },\n                        {\n                            \"valueAxis\": \"percentageChange\",\n                            \"rangeAxis\": \"\"\n                        }\n                    ]\n                }\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"32\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// Real example from the data of the number of successful vs failed shipments.\\nfetch bizevents\\n| filter event.provider == \\\"\" + eventProvider + \"\\\"\\n| filter startsWith(event.type, \\\"order.shipped\\\")\\n| summarize success = countIf(event.type == \\\"order.shipped\\\"), fail = countIf(event.type == \\\"order.shipped.system.outage\\\")\\n| fieldsAdd shippingSuccessRate = (toDouble(success)/(toDouble(success)+toDouble(fail))) * 100\",\n            \"davis\": {\n                \"enabled\": false,\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"singleValue\",\n            \"visualizationSettings\": {\n                \"thresholds\": [\n                    {\n                        \"id\": 1,\n                        \"field\": \"shippingSuccessRate\",\n                        \"title\": \"Shipping success rate\",\n                        \"isEnabled\": true,\n                        \"rules\": [\n                            {\n                                \"id\": 0,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-loglevel-emergency-default, #9033a3)\"\n                                },\n                                \"comparator\": \"≥\",\n                                \"label\": \"\",\n                                \"value\": 5\n                            }\n                        ]\n                    }\n                ],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {},\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxisLabel\": \"customer.id\",\n                        \"valueAxisLabel\": \"test\"\n                    },\n                    \"hiddenLegendFields\": []\n                },\n                \"singleValue\": {\n                    \"showLabel\": true,\n                    \"label\": \"💼 BUSINESS KPI\",\n                    \"prefixIcon\": \"\",\n                    \"autoscale\": true,\n                    \"sparklineSettings\": {\n                        \"isVisible\": false\n                    },\n                    \"alignment\": \"center\",\n                    \"trend\": {\n                        \"isVisible\": false\n                    },\n                    \"colorThresholdTarget\": \"background\",\n                    \"recordField\": \"shippingSuccessRate\"\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {},\n                    \"legend\": \"auto\"\n                },\n                \"unitsOverrides\": [\n                    {\n                        \"identifier\": \"shippingSuccessRate\",\n                        \"unitCategory\": \"percentage\",\n                        \"baseUnit\": \"percent\",\n                        \"displayUnit\": null,\n                        \"decimals\": 2,\n                        \"suffix\": \"\",\n                        \"delimiter\": true,\n                        \"added\": 1703160585115\n                    }\n                ],\n                \"histogram\": {\n                    \"dataMappings\": [\n                        {\n                            \"valueAxis\": \"success\",\n                            \"rangeAxis\": \"\"\n                        },\n                        {\n                            \"valueAxis\": \"fail\",\n                            \"rangeAxis\": \"\"\n                        },\n                        {\n                            \"valueAxis\": \"shippingSuccessRate\",\n                            \"rangeAxis\": \"\"\n                        }\n                    ]\n                }\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"33\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// Real example from the data of number of orders packed, per hour.\\nfetch bizevents\\n| filter event.provider == \\\"\" + eventProvider + \"\\\" and event.type == \\\"order.packed\\\"\\n| makeTimeseries ordersPacked = count(), interval:1h\",\n            \"davis\": {\n                \"enabled\": false,\n                \"componentState\": {\n                    \"selectedAnalyzerName\": \"dt.statistics.ui.anomaly_detection.AutoAdaptiveAnomalyDetectionAnalyzer\",\n                    \"inputData\": {\n                        \"dt.statistics.ui.anomaly_detection.AutoAdaptiveAnomalyDetectionAnalyzer\": {\n                            \"generalParameters\": {\n                                \"timeframe\": {\n                                    \"startTime\": \"2024-06-27T14:11:35.440Z\",\n                                    \"endTime\": \"2024-06-28T14:11:35.440Z\"\n                                },\n                                \"resolveDimensionalQueryData\": true,\n                                \"logVerbosity\": \"INFO\"\n                            },\n                            \"numberOfSignalFluctuations\": 1,\n                            \"alertCondition\": \"OUTSIDE\",\n                            \"alertOnMissingData\": false,\n                            \"violatingSamples\": 4,\n                            \"slidingWindow\": 5,\n                            \"dealertingSamples\": 5,\n                            \"query\": \"fetch bizevents\\n| filter event.provider == \\\"\" + eventProvider + \"\\\" and event.type == \\\"order.packed\\\"\\n| makeTimeseries ordersPacked = count(), interval:1h\"\n                        }\n                    }\n                },\n                \"davisVisualization\": {\n                    \"isAvailable\": true,\n                    \"settings\": {\n                        \"visibleSections\": \"VISUALIZATION\"\n                    }\n                }\n            },\n            \"visualization\": \"barChart\",\n            \"visualizationSettings\": {\n                \"thresholds\": [],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {},\n                    \"legend\": {\n                        \"hidden\": true\n                    },\n                    \"seriesOverrides\": [\n                        {\n                            \"seriesId\": [\n                                \"sparkline\"\n                            ],\n                            \"override\": {\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-vulnerability-status-resolved-default, #3e8e6a)\"\n                                }\n                            }\n                        }\n                    ],\n                    \"fieldMapping\": {\n                        \"timestamp\": \"timeframe\",\n                        \"leftAxisValues\": [\n                            \"ordersPacked\"\n                        ],\n                        \"leftAxisDimensions\": []\n                    },\n                    \"categoricalBarChartSettings\": {},\n                    \"hiddenLegendFields\": []\n                },\n                \"singleValue\": {\n                    \"showLabel\": true,\n                    \"label\": \"Success rate\",\n                    \"prefixIcon\": \"\",\n                    \"recordField\": \"singlevalue\",\n                    \"autoscale\": true,\n                    \"alignment\": \"center\",\n                    \"trend\": {\n                        \"isRelative\": true\n                    },\n                    \"sparklineSettings\": {\n                        \"variant\": \"area\",\n                        \"showTicks\": true\n                    }\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {},\n                    \"legend\": \"auto\"\n                },\n                \"unitsOverrides\": [\n                    {\n                        \"identifier\": \"singlevalue\",\n                        \"unitCategory\": \"percentage\",\n                        \"baseUnit\": \"percent\",\n                        \"displayUnit\": null,\n                        \"decimals\": 2,\n                        \"suffix\": \"\",\n                        \"delimiter\": false,\n                        \"added\": 1703100359149\n                    }\n                ],\n                \"histogram\": {\n                    \"dataMappings\": [\n                        {\n                            \"valueAxis\": \"interval\",\n                            \"rangeAxis\": \"\"\n                        }\n                    ]\n                }\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"34\": {\n            \"type\": \"markdown\",\n            \"title\": \"\",\n            \"content\": \"### Orders packed per hour\\n---\\nNumber of orders being packed, broken down hourly.\"\n        },\n        \"35\": {\n            \"type\": \"markdown\",\n            \"title\": \"\",\n            \"content\": \"### Shipping success rate\\n---\\nTrend of when orders are shipped successfully (🟢) or have issues (🔴).\"\n        },\n        \"36\": {\n            \"type\": \"markdown\",\n            \"title\": \"\",\n            \"content\": \"### Vouchers offered\\n---\\nTotal worth of vouchers offered for shipping errors (10% of order value over $1000.)\"\n        },\n        \"37\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// Real example from the data of successful vs failed shippings.\\nfetch bizevents\\n| filter event.provider == \\\"\" + eventProvider + \"\\\"\\n| filter startsWith(event.type, \\\"order.shipped\\\")\\n| makeTimeseries success = countIf(event.type == \\\"order.shipped\\\"), fail = countIf(event.type == \\\"order.shipped.system.outage\\\"), bins:40\",\n            \"davis\": {\n                \"enabled\": false,\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"barChart\",\n            \"visualizationSettings\": {\n                \"thresholds\": [],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {},\n                    \"legend\": {\n                        \"hidden\": true\n                    },\n                    \"seriesOverrides\": [\n                        {\n                            \"seriesId\": [\n                                \"fail\"\n                            ],\n                            \"override\": {\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-loglevel-emergency-default, #9033a3)\"\n                                }\n                            }\n                        },\n                        {\n                            \"seriesId\": [\n                                \"success\"\n                            ],\n                            \"override\": {\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-categorical-color-09-default, #649438)\"\n                                }\n                            }\n                        }\n                    ],\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxisLabel\": \"customer.id\",\n                        \"valueAxisLabel\": \"booking.value\"\n                    },\n                    \"fieldMapping\": {\n                        \"timestamp\": \"timeframe\",\n                        \"leftAxisValues\": [\n                            \"success\",\n                            \"fail\"\n                        ],\n                        \"leftAxisDimensions\": []\n                    },\n                    \"hiddenLegendFields\": []\n                },\n                \"singleValue\": {\n                    \"showLabel\": true,\n                    \"label\": \"Success rate\",\n                    \"prefixIcon\": \"\",\n                    \"recordField\": \"singlevalue\",\n                    \"autoscale\": true,\n                    \"alignment\": \"center\",\n                    \"trend\": {\n                        \"isRelative\": true\n                    },\n                    \"sparklineSettings\": {\n                        \"variant\": \"area\",\n                        \"showTicks\": true\n                    }\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {},\n                    \"legend\": \"auto\"\n                },\n                \"unitsOverrides\": [\n                    {\n                        \"identifier\": \"singlevalue\",\n                        \"unitCategory\": \"percentage\",\n                        \"baseUnit\": \"percent\",\n                        \"displayUnit\": null,\n                        \"decimals\": 2,\n                        \"suffix\": \"\",\n                        \"delimiter\": false,\n                        \"added\": 1703100359149\n                    }\n                ],\n                \"histogram\": {\n                    \"dataMappings\": [\n                        {\n                            \"valueAxis\": \"interval\",\n                            \"rangeAxis\": \"\"\n                        }\n                    ]\n                }\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"39\": {\n            \"type\": \"markdown\",\n            \"title\": \"\",\n            \"content\": \"### Probable lost orders\\n---\\nOrders which started picking more than 2 hours ago and have not been packed.\"\n        },\n        \"40\": {\n            \"type\": \"markdown\",\n            \"title\": \"\",\n            \"content\": \"### Gold loyalty delivery time\\n---\\nAverage delivery time for \\\"Gold\\\" loyalty members, over time.\"\n        },\n        \"41\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// Real example from the data looking at the time between shipping and order being received, for \\\"Gold\\\" members.\\nfetch bizevents\\n| filter event.provider == \\\"\" + eventProvider + \"\\\" \\n| filter event.type == \\\"order.shipped\\\" or event.type == \\\"order.received\\\" or event.type == \\\"place.order\\\"\\n| sort timestamp asc\\n| fieldsAdd shippedTimestamp = if(event.type == \\\"order.shipped\\\", timestamp), receivedTimestamp = if(event.type == \\\"order.received\\\", timestamp)\\n| summarize shippedTime = takeMin(shippedTimestamp), receivedTime = takeMin(receivedTimestamp), loyalty = takeAny(loyalty), by:{order.id}\\n| filterOut isNull(receivedTime) or isNull(shippedTime)\\n| filter loyalty == \\\"gold\\\"\\n| fieldsAdd deliveryTime = receivedTime - shippedTime\\n| makeTimeseries avgDeliveryTime = avg(deliveryTime), time:receivedTime\",\n            \"davis\": {\n                \"enabled\": false,\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"lineChart\",\n            \"visualizationSettings\": {\n                \"thresholds\": [],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {\n                        \"platinum\": {\n                            \"color\": \"var(--dt-colors-charts-loglevel-emergency-default, #9033a3)\",\n                            \"added\": 1717152716585\n                        },\n                        \"sapphire\": {\n                            \"color\": \"var(--dt-colors-charts-apdex-excellent-default, #2a7453)\",\n                            \"added\": 1717152727709\n                        },\n                        \"pearl\": {\n                            \"color\": \"var(--dt-colors-charts-categorical-color-02-default, #2c2f3f)\",\n                            \"added\": 1717152738998\n                        }\n                    },\n                    \"legend\": {\n                        \"hidden\": true\n                    },\n                    \"seriesOverrides\": [\n                        {\n                            \"seriesId\": [\n                                \"sparkline\"\n                            ],\n                            \"override\": {\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-categorical-color-08-default, #8b6ecf)\"\n                                }\n                            }\n                        }\n                    ],\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxisLabel\": \"mgm.rewards\",\n                        \"valueAxisLabel\": \"count()\"\n                    },\n                    \"fieldMapping\": {\n                        \"timestamp\": \"timeframe\",\n                        \"leftAxisValues\": [\n                            \"avgDeliveryTime\"\n                        ],\n                        \"leftAxisDimensions\": []\n                    },\n                    \"hiddenLegendFields\": []\n                },\n                \"singleValue\": {\n                    \"showLabel\": true,\n                    \"label\": \"Success rate\",\n                    \"prefixIcon\": \"\",\n                    \"recordField\": \"singlevalue\",\n                    \"autoscale\": true,\n                    \"alignment\": \"center\",\n                    \"trend\": {\n                        \"isRelative\": true\n                    },\n                    \"sparklineSettings\": {\n                        \"variant\": \"area\",\n                        \"showTicks\": true\n                    }\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {},\n                    \"legend\": \"auto\"\n                },\n                \"unitsOverrides\": [\n                    {\n                        \"identifier\": \"avgDeliveryTime\",\n                        \"unitCategory\": \"time\",\n                        \"baseUnit\": \"nanosecond\",\n                        \"displayUnit\": null,\n                        \"decimals\": 0,\n                        \"suffix\": \"\",\n                        \"delimiter\": false,\n                        \"added\": 1703100359149\n                    }\n                ],\n                \"histogram\": {\n                    \"dataMappings\": [\n                        {\n                            \"valueAxis\": \"interval\",\n                            \"rangeAxis\": \"\"\n                        }\n                    ]\n                }\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"42\": {\n            \"type\": \"markdown\",\n            \"title\": \"\",\n            \"content\": \"### End-to-end order time\\n---\\nTotal time from place order to order received, by loyalty.\"\n        },\n        \"45\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// Real example from the data looking at the time between shipping and order being received, for \\\"Gold\\\" members.\\nfetch bizevents\\n| filter event.provider == \\\"\" + eventProvider + \"\\\" \\n| filter event.type == \\\"order.shipped\\\" or event.type == \\\"order.received\\\" or event.type == \\\"place.order\\\"\\n| sort timestamp asc\\n| fieldsAdd shippedTimestamp = if(event.type == \\\"order.shipped\\\", timestamp), receivedTimestamp = if(event.type == \\\"order.received\\\", timestamp)\\n| summarize shippedTime = takeMin(shippedTimestamp), receivedTime = takeMin(receivedTimestamp), loyalty = takeAny(loyalty), by:{order.id}\\n| filterOut isNull(receivedTime) or isNull(shippedTime)\\n| filter loyalty == \\\"gold\\\"\\n| fieldsAdd deliveryTime = receivedTime - shippedTime\\n| summarize avgDeliveryTime = avg(deliveryTime)\",\n            \"davis\": {\n                \"enabled\": false,\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"singleValue\",\n            \"visualizationSettings\": {\n                \"thresholds\": [\n                    {\n                        \"id\": 1,\n                        \"field\": \"avgDeliveryTime\",\n                        \"title\": \"\",\n                        \"isEnabled\": true,\n                        \"rules\": [\n                            {\n                                \"id\": 2,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-vulnerability-status-resolved-default, #3e8e6a)\"\n                                },\n                                \"comparator\": \"<\",\n                                \"label\": \"\",\n                                \"value\": 5400000000000\n                            }\n                        ]\n                    }\n                ],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {},\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxisLabel\": \"dt.entity.host\",\n                        \"valueAxisLabel\": \"test\"\n                    },\n                    \"hiddenLegendFields\": []\n                },\n                \"singleValue\": {\n                    \"showLabel\": true,\n                    \"label\": \"💼 BUSINESS KPI\",\n                    \"prefixIcon\": \"\",\n                    \"autoscale\": true,\n                    \"sparklineSettings\": {\n                        \"isVisible\": false\n                    },\n                    \"alignment\": \"center\",\n                    \"trend\": {\n                        \"isVisible\": false\n                    },\n                    \"recordField\": \"avgDeliveryTime\",\n                    \"colorThresholdTarget\": \"background\"\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {},\n                    \"legend\": \"auto\"\n                },\n                \"unitsOverrides\": [\n                    {\n                        \"identifier\": \"singevalue\",\n                        \"unitCategory\": \"time\",\n                        \"baseUnit\": \"minute\",\n                        \"displayUnit\": null,\n                        \"decimals\": 2,\n                        \"suffix\": \"\",\n                        \"delimiter\": true,\n                        \"added\": 1703262264498\n                    }\n                ],\n                \"histogram\": {\n                    \"dataMappings\": [\n                        {\n                            \"valueAxis\": \"avgDeliveryTime\",\n                            \"rangeAxis\": \"\"\n                        }\n                    ]\n                }\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"49\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"fetch bizevents\\n| filter event.provider == \\\"\" + eventProvider + \"\\\"\\n| filter event.type == \\\"order.packed\\\" or event.type == \\\"item.picked\\\"\\n| summarize pickedCount = countIf(event.type == \\\"item.picked\\\"), packedCount = countIf(event.type == \\\"order.packed\\\"), firstPickTime = takeFirst(timestamp), by:{order.id}\\n| fieldsAdd timeSinceFirstPick = (now() - firstPickTime)\\n| filter packedCount == 0 and timeSinceFirstPick > toDuration(7200000000000)\\n| makeTimeseries `Probably lost orders` = count(), time:firstPickTime, bins:50\\n| fieldsAdd totalLostOrders = arraySum(`Probably lost orders`)\",\n            \"davis\": {\n                \"enabled\": false,\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"singleValue\",\n            \"visualizationSettings\": {\n                \"thresholds\": [],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {\n                        \"sapphire\": {\n                            \"color\": \"var(--dt-colors-charts-categorical-color-01-default, #134fc9)\",\n                            \"added\": 1717151655357\n                        },\n                        \"gold\": {\n                            \"color\": \"var(--dt-colors-charts-categorical-color-06-default, #a9780f)\",\n                            \"added\": 1717151659952\n                        },\n                        \"noir\": {\n                            \"color\": \"var(--dt-colors-charts-loglevel-none-default, #2c2f3f)\",\n                            \"added\": 1717151665036\n                        },\n                        \"pearl\": {\n                            \"color\": \"var(--dt-colors-charts-categorical-color-02-default, #2c2f3f)\",\n                            \"added\": 1717151669712\n                        },\n                        \"platinum\": {\n                            \"color\": \"var(--dt-colors-charts-categorical-color-07-default, #438fb1)\",\n                            \"added\": 1717151677352\n                        }\n                    },\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxisLabel\": \"order.id\",\n                        \"valueAxisLabel\": \"pickedCount\",\n                        \"layout\": \"horizontal\"\n                    },\n                    \"hiddenLegendFields\": [],\n                    \"legend\": {\n                        \"hidden\": true\n                    },\n                    \"fieldMapping\": {\n                        \"timestamp\": \"timeframe\",\n                        \"leftAxisValues\": [\n                            \"Probably lost orders\"\n                        ],\n                        \"leftAxisDimensions\": [\n                            \"totalLostOrders\"\n                        ]\n                    }\n                },\n                \"singleValue\": {\n                    \"showLabel\": false,\n                    \"label\": \"\",\n                    \"prefixIcon\": \"MailClosedIcon\",\n                    \"recordField\": \"totalLostOrders\",\n                    \"autoscale\": true,\n                    \"sparklineSettings\": {\n                        \"showTicks\": true\n                    },\n                    \"alignment\": \"center\",\n                    \"trend\": {\n                        \"isInverseTrend\": true\n                    }\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {},\n                    \"legend\": \"auto\"\n                },\n                \"unitsOverrides\": [\n                    {\n                        \"identifier\": \"singlevalue\",\n                        \"unitCategory\": \"time\",\n                        \"baseUnit\": \"second\",\n                        \"displayUnit\": null,\n                        \"decimals\": 0,\n                        \"suffix\": \"\",\n                        \"delimiter\": false,\n                        \"added\": 1703177374563\n                    }\n                ],\n                \"histogram\": {\n                    \"dataMappings\": [\n                        {\n                            \"valueAxis\": \"interval\",\n                            \"rangeAxis\": \"\"\n                        },\n                        {\n                            \"valueAxis\": \"totalLostOrders\",\n                            \"rangeAxis\": \"\"\n                        }\n                    ]\n                }\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"51\": {\n            \"type\": \"markdown\",\n            \"title\": \"\",\n            \"content\": \" \"\n        },\n        \"53\": {\n            \"type\": \"markdown\",\n            \"title\": \"\",\n            \"content\": \"Drilldown: [IT](\" + environmentUrl + \"/ui/apps/dynatrace.classic.problems/ui/problems) | [Security](\" + environmentUrl + \"/ui/apps/dynatrace.classic.vulnerabilities/ui/security/vulnerabilities) | [Carbon](\" + environmentUrl + \"/ui/apps/dynatrace.biz.carbon/) | [Business](https://www.dynatrace.com/company/dynatrace-for-executives/#02-business-analytics)\"\n        },\n        \"54\": {\n            \"type\": \"markdown\",\n            \"title\": \"\",\n            \"content\": \"Drilldown: [IT](\" + environmentUrl + \"/ui/apps/dynatrace.classic.problems/ui/problems) | [Security](\" + environmentUrl + \"/ui/apps/dynatrace.classic.vulnerabilities/ui/security/vulnerabilities) | [Carbon](\" + environmentUrl + \"/ui/apps/dynatrace.biz.carbon/) | [Business](\" + bizFlowUrl + \")\"\n        },\n        \"55\": {\n            \"type\": \"markdown\",\n            \"title\": \"\",\n            \"content\": \"Drilldown: [IT](\" + environmentUrl + \"/ui/apps/dynatrace.classic.problems/ui/problems) | [Security](\" + environmentUrl + \"/ui/apps/dynatrace.classic.vulnerabilities/ui/security/vulnerabilities) | [Carbon](\" + environmentUrl + \"/ui/apps/dynatrace.biz.carbon/) | [Business](https://www.dynatrace.com/company/dynatrace-for-executives/#02-business-analytics)\"\n        },\n        \"56\": {\n            \"type\": \"markdown\",\n            \"title\": \"\",\n            \"content\": \"Drilldown: [IT](\" + environmentUrl + \"/ui/apps/dynatrace.classic.problems/ui/problems) | [Security](\" + environmentUrl + \"/ui/apps/dynatrace.classic.vulnerabilities/ui/security/vulnerabilities) | [Carbon](\" + environmentUrl + \"/ui/apps/dynatrace.biz.carbon/) | [Business](https://www.dynatrace.com/company/dynatrace-for-executives/#02-business-analytics)\"\n        },\n        \"66\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// The two main ways to achieve this number are:\\n// - Query Davis events and filter by the services/entities known to power this part of the journey.\\n// - Using a topology lookup:\\n//   - Get Biz Events related to this step.\\n//   - \\\"Lookup\\\" the Spans using the trace ID.\\n//   - Collect a \\\"Distinct\\\" list of the Services.\\n//   - \\\"Lookup\\\" any Davis events related to those Services.\\nfetch bizevents\\n| fieldsAdd problemExample = 0\\n| limit 1\",\n            \"davis\": {\n                \"enabled\": false,\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"singleValue\",\n            \"visualizationSettings\": {\n                \"thresholds\": [\n                    {\n                        \"id\": 1,\n                        \"field\": \"problemExample\",\n                        \"title\": \"Open Problems\",\n                        \"isEnabled\": true,\n                        \"rules\": [\n                            {\n                                \"id\": 0,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-categorical-themed-fireplace-color-01-default, #ae132d)\"\n                                },\n                                \"comparator\": \"≥\",\n                                \"label\": \"\",\n                                \"value\": 1\n                            },\n                            {\n                                \"id\": 2,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-vulnerability-status-resolved-default, #3e8e6a)\"\n                                },\n                                \"comparator\": \"≥\",\n                                \"label\": \"\",\n                                \"value\": 0\n                            }\n                        ]\n                    }\n                ],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {},\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxis\": \"dt.entity.host\",\n                        \"valueAxis\": \"problemExample\",\n                        \"categoryAxisLabel\": \"dt.entity.host\",\n                        \"valueAxisLabel\": \"problemExample\"\n                    },\n                    \"fieldMapping\": {\n                        \"timestamp\": \"timestamp\",\n                        \"leftAxisValues\": [\n                            \"problemExample\"\n                        ],\n                        \"leftAxisDimensions\": [\n                            \"dt.entity.host\"\n                        ]\n                    },\n                    \"hiddenLegendFields\": []\n                },\n                \"singleValue\": {\n                    \"showLabel\": true,\n                    \"label\": \"🛠️ IT ISSUES\",\n                    \"prefixIcon\": \"\",\n                    \"autoscale\": true,\n                    \"sparklineSettings\": {\n                        \"isVisible\": false\n                    },\n                    \"alignment\": \"center\",\n                    \"trend\": {\n                        \"isVisible\": false\n                    },\n                    \"colorThresholdTarget\": \"background\",\n                    \"recordField\": \"problemExample\"\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {\n                        \"category\": \"dt.entity.host\",\n                        \"value\": \"timestamp\"\n                    },\n                    \"legend\": \"auto\"\n                },\n                \"histogram\": {\n                    \"dataMappings\": [\n                        {\n                            \"valueAxis\": \"problemExample\",\n                            \"rangeAxis\": \"\"\n                        }\n                    ]\n                }\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"67\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// The two main ways to achieve this number are:\\n// - Query Davis events and filter by the services/entities known to power this part of the journey.\\n// - Using a topology lookup:\\n//   - Get Biz Events related to this step.\\n//   - \\\"Lookup\\\" the Spans using the trace ID.\\n//   - Collect a \\\"Distinct\\\" list of the Services.\\n//   - \\\"Lookup\\\" any Davis events related to those Services.\\nfetch bizevents\\n| fieldsAdd problemExample = 0\\n| limit 1\",\n            \"davis\": {\n                \"enabled\": false,\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"singleValue\",\n            \"visualizationSettings\": {\n                \"thresholds\": [\n                    {\n                        \"id\": 1,\n                        \"field\": \"problemExample\",\n                        \"title\": \"Open Problems\",\n                        \"isEnabled\": true,\n                        \"rules\": [\n                            {\n                                \"id\": 0,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-categorical-themed-fireplace-color-01-default, #ae132d)\"\n                                },\n                                \"comparator\": \"≥\",\n                                \"label\": \"\",\n                                \"value\": 1\n                            },\n                            {\n                                \"id\": 2,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-vulnerability-status-resolved-default, #3e8e6a)\"\n                                },\n                                \"comparator\": \"≥\",\n                                \"label\": \"\",\n                                \"value\": 0\n                            }\n                        ]\n                    }\n                ],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {},\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxis\": \"dt.entity.host\",\n                        \"valueAxis\": \"problemExample\",\n                        \"categoryAxisLabel\": \"dt.entity.host\",\n                        \"valueAxisLabel\": \"problemExample\"\n                    },\n                    \"fieldMapping\": {\n                        \"timestamp\": \"timestamp\",\n                        \"leftAxisValues\": [\n                            \"problemExample\"\n                        ],\n                        \"leftAxisDimensions\": [\n                            \"dt.entity.host\"\n                        ]\n                    },\n                    \"hiddenLegendFields\": []\n                },\n                \"singleValue\": {\n                    \"showLabel\": true,\n                    \"label\": \"🛠️ IT ISSUES\",\n                    \"prefixIcon\": \"\",\n                    \"autoscale\": true,\n                    \"sparklineSettings\": {\n                        \"isVisible\": false\n                    },\n                    \"alignment\": \"center\",\n                    \"trend\": {\n                        \"isVisible\": false\n                    },\n                    \"colorThresholdTarget\": \"background\",\n                    \"recordField\": \"problemExample\"\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {\n                        \"category\": \"dt.entity.host\",\n                        \"value\": \"timestamp\"\n                    },\n                    \"legend\": \"auto\"\n                },\n                \"histogram\": {\n                    \"dataMappings\": [\n                        {\n                            \"valueAxis\": \"problemExample\",\n                            \"rangeAxis\": \"\"\n                        }\n                    ]\n                }\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"68\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// The two main ways to achieve this number are:\\n// - Query Davis events and filter by the services/entities known to power this part of the journey.\\n// - Using a topology lookup:\\n//   - Get Biz Events related to this step.\\n//   - \\\"Lookup\\\" the Spans using the trace ID.\\n//   - Collect a \\\"Distinct\\\" list of the Services.\\n//   - \\\"Lookup\\\" any Davis events related to those Services.\\nfetch bizevents\\n| fieldsAdd problemExample = 0\\n| limit 1\",\n            \"davis\": {\n                \"enabled\": false,\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"singleValue\",\n            \"visualizationSettings\": {\n                \"thresholds\": [\n                    {\n                        \"id\": 1,\n                        \"field\": \"problemExample\",\n                        \"title\": \"Open Problems\",\n                        \"isEnabled\": true,\n                        \"rules\": [\n                            {\n                                \"id\": 0,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-categorical-themed-fireplace-color-01-default, #ae132d)\"\n                                },\n                                \"comparator\": \"≥\",\n                                \"label\": \"\",\n                                \"value\": 1\n                            },\n                            {\n                                \"id\": 2,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-vulnerability-status-resolved-default, #3e8e6a)\"\n                                },\n                                \"comparator\": \"≥\",\n                                \"label\": \"\",\n                                \"value\": 0\n                            }\n                        ]\n                    }\n                ],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {},\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxis\": \"dt.entity.host\",\n                        \"valueAxis\": \"problemExample\",\n                        \"categoryAxisLabel\": \"dt.entity.host\",\n                        \"valueAxisLabel\": \"problemExample\"\n                    },\n                    \"fieldMapping\": {\n                        \"timestamp\": \"timestamp\",\n                        \"leftAxisValues\": [\n                            \"problemExample\"\n                        ],\n                        \"leftAxisDimensions\": [\n                            \"dt.entity.host\"\n                        ]\n                    },\n                    \"hiddenLegendFields\": []\n                },\n                \"singleValue\": {\n                    \"showLabel\": true,\n                    \"label\": \"🛠️ IT ISSUES\",\n                    \"prefixIcon\": \"\",\n                    \"autoscale\": true,\n                    \"sparklineSettings\": {\n                        \"isVisible\": false\n                    },\n                    \"alignment\": \"center\",\n                    \"trend\": {\n                        \"isVisible\": false\n                    },\n                    \"colorThresholdTarget\": \"background\",\n                    \"recordField\": \"problemExample\"\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {\n                        \"category\": \"dt.entity.host\",\n                        \"value\": \"timestamp\"\n                    },\n                    \"legend\": \"auto\"\n                },\n                \"histogram\": {\n                    \"dataMappings\": [\n                        {\n                            \"valueAxis\": \"problemExample\",\n                            \"rangeAxis\": \"\"\n                        }\n                    ]\n                }\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"69\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// The two main ways to achieve this number are:\\n// - Query Davis events and filter by the services/entities known to power this part of the journey.\\n// - Using a topology lookup:\\n//   - Get Biz Events related to this step.\\n//   - \\\"Lookup\\\" the Spans using the trace ID.\\n//   - Collect a \\\"Distinct\\\" list of the Services.\\n//   - \\\"Lookup\\\" any Davis events related to those Services.\\nfetch bizevents\\n| fieldsAdd problemExample = 0\\n| limit 1\",\n            \"davis\": {\n                \"enabled\": false,\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"singleValue\",\n            \"visualizationSettings\": {\n                \"thresholds\": [\n                    {\n                        \"id\": 1,\n                        \"field\": \"problemExample\",\n                        \"title\": \"Open Problems\",\n                        \"isEnabled\": true,\n                        \"rules\": [\n                            {\n                                \"id\": 0,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-categorical-themed-fireplace-color-01-default, #ae132d)\"\n                                },\n                                \"comparator\": \"≥\",\n                                \"label\": \"\",\n                                \"value\": 1\n                            },\n                            {\n                                \"id\": 2,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-vulnerability-status-resolved-default, #3e8e6a)\"\n                                },\n                                \"comparator\": \"≥\",\n                                \"label\": \"\",\n                                \"value\": 0\n                            }\n                        ]\n                    }\n                ],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {},\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxis\": \"dt.entity.host\",\n                        \"valueAxis\": \"problemExample\",\n                        \"categoryAxisLabel\": \"dt.entity.host\",\n                        \"valueAxisLabel\": \"problemExample\"\n                    },\n                    \"fieldMapping\": {\n                        \"timestamp\": \"timestamp\",\n                        \"leftAxisValues\": [\n                            \"problemExample\"\n                        ],\n                        \"leftAxisDimensions\": [\n                            \"dt.entity.host\"\n                        ]\n                    },\n                    \"hiddenLegendFields\": []\n                },\n                \"singleValue\": {\n                    \"showLabel\": true,\n                    \"label\": \"🛠️ IT ISSUES\",\n                    \"prefixIcon\": \"\",\n                    \"autoscale\": true,\n                    \"sparklineSettings\": {\n                        \"isVisible\": false\n                    },\n                    \"alignment\": \"center\",\n                    \"trend\": {\n                        \"isVisible\": false\n                    },\n                    \"colorThresholdTarget\": \"background\",\n                    \"recordField\": \"problemExample\"\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {\n                        \"category\": \"dt.entity.host\",\n                        \"value\": \"timestamp\"\n                    },\n                    \"legend\": \"auto\"\n                },\n                \"histogram\": {\n                    \"dataMappings\": [\n                        {\n                            \"valueAxis\": \"problemExample\",\n                            \"rangeAxis\": \"\"\n                        }\n                    ]\n                }\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"70\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// The two main ways to achieve this number are:\\n// - Query Security events and filter by the services/entities known to power this part of the journey.\\n// - Using a topology lookup:\\n//   - Get Biz Events related to this step.\\n//   - \\\"Lookup\\\" the Spans using the trace ID.\\n//   - Collect a \\\"Distinct\\\" list of the Services.\\n//   - \\\"Lookup\\\" any Security events related to those Services.\\nfetch bizevents\\n| fieldsAdd securityExample = \\\"3/10\\\"\\n| limit 1\",\n            \"davis\": {\n                \"enabled\": false,\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"singleValue\",\n            \"visualizationSettings\": {\n                \"thresholds\": [\n                    {\n                        \"id\": 1,\n                        \"field\": \"securityExample\",\n                        \"title\": \"Security score\",\n                        \"isEnabled\": true,\n                        \"rules\": [\n                            {\n                                \"id\": 1,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-apdex-excellent-default, #2a7453)\"\n                                },\n                                \"comparator\": \"=\",\n                                \"label\": \"\",\n                                \"value\": \"3/10\"\n                            }\n                        ]\n                    }\n                ],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {},\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxisLabel\": \"securityExample\",\n                        \"valueAxisLabel\": \"job.fee\"\n                    },\n                    \"hiddenLegendFields\": []\n                },\n                \"singleValue\": {\n                    \"showLabel\": true,\n                    \"label\": \"🔒 SECURITY\",\n                    \"prefixIcon\": \"\",\n                    \"autoscale\": true,\n                    \"alignment\": \"center\",\n                    \"colorThresholdTarget\": \"background\",\n                    \"recordField\": \"securityExample\"\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {\n                        \"category\": \"securityExample\",\n                        \"value\": \"timestamp\"\n                    },\n                    \"legend\": \"auto\"\n                },\n                \"histogram\": {\n                    \"dataMappings\": []\n                }\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"71\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// The two main ways to achieve this number are:\\n// - Query Security events and filter by the services/entities known to power this part of the journey.\\n// - Using a topology lookup:\\n//   - Get Biz Events related to this step.\\n//   - \\\"Lookup\\\" the Spans using the trace ID.\\n//   - Collect a \\\"Distinct\\\" list of the Services.\\n//   - \\\"Lookup\\\" any Security events related to those Services.\\nfetch bizevents\\n| fieldsAdd securityExample = \\\"5/10\\\"\\n| limit 1\",\n            \"davis\": {\n                \"enabled\": false,\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"singleValue\",\n            \"visualizationSettings\": {\n                \"thresholds\": [\n                    {\n                        \"id\": 1,\n                        \"field\": \"securityExample\",\n                        \"title\": \"Security score\",\n                        \"isEnabled\": true,\n                        \"rules\": [\n                            {\n                                \"id\": 1,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-apdex-excellent-default, #2a7453)\"\n                                },\n                                \"comparator\": \"=\",\n                                \"label\": \"\",\n                                \"value\": \"5/10\"\n                            }\n                        ]\n                    }\n                ],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {},\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxis\": \"securityExample\",\n                        \"valueAxis\": \"booking.value\",\n                        \"categoryAxisLabel\": \"securityExample\",\n                        \"valueAxisLabel\": \"booking.value\"\n                    },\n                    \"fieldMapping\": {\n                        \"timestamp\": \"timestamp\",\n                        \"leftAxisValues\": [\n                            \"booking.value\"\n                        ],\n                        \"leftAxisDimensions\": [\n                            \"securityExample\"\n                        ]\n                    },\n                    \"hiddenLegendFields\": []\n                },\n                \"singleValue\": {\n                    \"showLabel\": true,\n                    \"label\": \"🔒 SECURITY\",\n                    \"prefixIcon\": \"\",\n                    \"autoscale\": true,\n                    \"alignment\": \"center\",\n                    \"colorThresholdTarget\": \"background\",\n                    \"recordField\": \"securityExample\"\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {\n                        \"category\": \"securityExample\",\n                        \"value\": \"timestamp\"\n                    },\n                    \"legend\": \"auto\"\n                },\n                \"histogram\": {\n                    \"dataMappings\": []\n                }\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"72\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// The two main ways to achieve this number are:\\n// - Query Security events and filter by the services/entities known to power this part of the journey.\\n// - Using a topology lookup:\\n//   - Get Biz Events related to this step.\\n//   - \\\"Lookup\\\" the Spans using the trace ID.\\n//   - Collect a \\\"Distinct\\\" list of the Services.\\n//   - \\\"Lookup\\\" any Security events related to those Services.\\nfetch bizevents\\n| fieldsAdd securityExample = \\\"4/10\\\"\\n| limit 1\",\n            \"davis\": {\n                \"enabled\": false,\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"singleValue\",\n            \"visualizationSettings\": {\n                \"thresholds\": [\n                    {\n                        \"id\": 1,\n                        \"field\": \"securityExample\",\n                        \"title\": \"Security score\",\n                        \"isEnabled\": true,\n                        \"rules\": [\n                            {\n                                \"id\": 1,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-apdex-excellent-default, #2a7453)\"\n                                },\n                                \"comparator\": \"=\",\n                                \"label\": \"\",\n                                \"value\": \"4/10\"\n                            }\n                        ]\n                    }\n                ],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {},\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxisLabel\": \"securityExample\",\n                        \"valueAxisLabel\": \"account.fee\",\n                        \"categoryAxis\": \"securityExample\",\n                        \"valueAxis\": \"account.fee\"\n                    },\n                    \"hiddenLegendFields\": [],\n                    \"fieldMapping\": {\n                        \"timestamp\": \"timestamp\",\n                        \"leftAxisValues\": [\n                            \"account.fee\"\n                        ],\n                        \"leftAxisDimensions\": [\n                            \"securityExample\"\n                        ]\n                    }\n                },\n                \"singleValue\": {\n                    \"showLabel\": true,\n                    \"label\": \"🔒 SECURITY\",\n                    \"prefixIcon\": \"\",\n                    \"autoscale\": true,\n                    \"alignment\": \"center\",\n                    \"colorThresholdTarget\": \"background\",\n                    \"recordField\": \"securityExample\"\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {\n                        \"category\": \"securityExample\",\n                        \"value\": \"timestamp\"\n                    },\n                    \"legend\": \"auto\"\n                },\n                \"histogram\": {\n                    \"dataMappings\": []\n                }\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"73\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// The two main ways to achieve this number are:\\n// - Query Security events and filter by the services/entities known to power this part of the journey.\\n// - Using a topology lookup:\\n//   - Get Biz Events related to this step.\\n//   - \\\"Lookup\\\" the Spans using the trace ID.\\n//   - Collect a \\\"Distinct\\\" list of the Services.\\n//   - \\\"Lookup\\\" any Security events related to those Services.\\nfetch bizevents\\n| fieldsAdd securityExample = \\\"2/10\\\"\\n| limit 1\",\n            \"davis\": {\n                \"enabled\": false,\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"singleValue\",\n            \"visualizationSettings\": {\n                \"thresholds\": [\n                    {\n                        \"id\": 1,\n                        \"field\": \"securityExample\",\n                        \"title\": \"Security score\",\n                        \"isEnabled\": true,\n                        \"rules\": [\n                            {\n                                \"id\": 1,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-apdex-excellent-default, #2a7453)\"\n                                },\n                                \"comparator\": \"=\",\n                                \"label\": \"\",\n                                \"value\": \"2/10\"\n                            }\n                        ]\n                    }\n                ],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {},\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxis\": \"securityExample\",\n                        \"valueAxis\": \"booking.value\",\n                        \"categoryAxisLabel\": \"securityExample\",\n                        \"valueAxisLabel\": \"booking.value\"\n                    },\n                    \"fieldMapping\": {\n                        \"timestamp\": \"timestamp\",\n                        \"leftAxisValues\": [\n                            \"booking.value\"\n                        ],\n                        \"leftAxisDimensions\": [\n                            \"securityExample\"\n                        ]\n                    },\n                    \"hiddenLegendFields\": []\n                },\n                \"singleValue\": {\n                    \"showLabel\": true,\n                    \"label\": \"🔒 SECURITY\",\n                    \"prefixIcon\": \"\",\n                    \"autoscale\": true,\n                    \"alignment\": \"center\",\n                    \"colorThresholdTarget\": \"background\",\n                    \"recordField\": \"securityExample\"\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {\n                        \"category\": \"securityExample\",\n                        \"value\": \"timestamp\"\n                    },\n                    \"legend\": \"auto\"\n                },\n                \"histogram\": {\n                    \"dataMappings\": []\n                }\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"74\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// This number obviously requires the Carbon app to be installed. An example way to calculate the footprint for part of the journey is:\\n// - Fetch the Biz Events related to this part of the journey.\\n// - Collect a \\\"Distinct\\\" list of the Hosts those Biz Events come from.\\n// - \\\"Lookup\\\" the Carbon events related to those hosts.\\n// - (Optional) If there's lots of shared infrastructure, you can go one step further and use the Process CPU to distribute Carbon to the specific Processes in use.\\nfetch bizevents\\n| fieldsAdd carbonExample = 105\\n| limit 1\",\n            \"davis\": {\n                \"enabled\": false,\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"singleValue\",\n            \"visualizationSettings\": {\n                \"thresholds\": [\n                    {\n                        \"id\": 1,\n                        \"field\": \"carbonExample\",\n                        \"title\": \"Carbon footprint\",\n                        \"isEnabled\": true,\n                        \"rules\": [\n                            {\n                                \"id\": 0,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-apdex-excellent-default, #2a7453)\"\n                                },\n                                \"comparator\": \"<\",\n                                \"label\": \"\",\n                                \"value\": 1000\n                            }\n                        ]\n                    }\n                ],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {},\n                    \"fieldMapping\": {\n                        \"timestamp\": \"timestamp\",\n                        \"leftAxisValues\": [\n                            \"carbonExample\"\n                        ],\n                        \"leftAxisDimensions\": [\n                            \"dt.entity.host\"\n                        ]\n                    },\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxis\": \"dt.entity.host\",\n                        \"valueAxis\": \"carbonExample\",\n                        \"categoryAxisLabel\": \"dt.entity.host\",\n                        \"valueAxisLabel\": \"carbonExample\"\n                    },\n                    \"hiddenLegendFields\": []\n                },\n                \"singleValue\": {\n                    \"showLabel\": true,\n                    \"label\": \"🌳 CARBON\",\n                    \"autoscale\": true,\n                    \"sparklineSettings\": {\n                        \"isVisible\": false,\n                        \"showTicks\": true\n                    },\n                    \"alignment\": \"center\",\n                    \"trend\": {\n                        \"isVisible\": true,\n                        \"isRelative\": true,\n                        \"isInverseTrend\": true\n                    },\n                    \"recordField\": \"carbonExample\",\n                    \"colorThresholdTarget\": \"background\"\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {\n                        \"category\": \"dt.entity.host\",\n                        \"value\": \"timestamp\"\n                    },\n                    \"legend\": \"auto\"\n                },\n                \"unitsOverrides\": [\n                    {\n                        \"identifier\": \"carbonExample\",\n                        \"unitCategory\": \"mass\",\n                        \"baseUnit\": \"kilogram\",\n                        \"displayUnit\": \"kilogram\",\n                        \"decimals\": 0,\n                        \"suffix\": \"\",\n                        \"delimiter\": false,\n                        \"added\": 1703159936837\n                    }\n                ],\n                \"histogram\": {\n                    \"dataMappings\": [\n                        {\n                            \"valueAxis\": \"carbonExample\",\n                            \"rangeAxis\": \"\"\n                        }\n                    ]\n                }\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"75\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// This number obviously requires the Carbon app to be installed. An example way to calculate the footprint for part of the journey is:\\n// - Fetch the Biz Events related to this part of the journey.\\n// - Collect a \\\"Distinct\\\" list of the Hosts those Biz Events come from.\\n// - \\\"Lookup\\\" the Carbon events related to those hosts.\\n// - (Optional) If there's lots of shared infrastructure, you can go one step further and use the Process CPU to distribute Carbon to the specific Processes in use.\\nfetch bizevents\\n| fieldsAdd carbonExample = 587\\n| limit 1\",\n            \"davis\": {\n                \"enabled\": false,\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"singleValue\",\n            \"visualizationSettings\": {\n                \"thresholds\": [\n                    {\n                        \"id\": 1,\n                        \"field\": \"carbonExample\",\n                        \"title\": \"Carbon footprint\",\n                        \"isEnabled\": true,\n                        \"rules\": [\n                            {\n                                \"id\": 0,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-apdex-excellent-default, #2a7453)\"\n                                },\n                                \"comparator\": \"<\",\n                                \"label\": \"\",\n                                \"value\": 1000\n                            }\n                        ]\n                    }\n                ],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {},\n                    \"fieldMapping\": {\n                        \"timestamp\": \"timestamp\",\n                        \"leftAxisValues\": [\n                            \"carbonExample\"\n                        ],\n                        \"leftAxisDimensions\": [\n                            \"dt.entity.host\"\n                        ]\n                    },\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxis\": \"dt.entity.host\",\n                        \"valueAxis\": \"carbonExample\",\n                        \"categoryAxisLabel\": \"dt.entity.host\",\n                        \"valueAxisLabel\": \"carbonExample\"\n                    },\n                    \"hiddenLegendFields\": []\n                },\n                \"singleValue\": {\n                    \"showLabel\": true,\n                    \"label\": \"🌳 CARBON\",\n                    \"autoscale\": true,\n                    \"sparklineSettings\": {\n                        \"isVisible\": false,\n                        \"showTicks\": true\n                    },\n                    \"alignment\": \"center\",\n                    \"trend\": {\n                        \"isVisible\": true,\n                        \"isRelative\": true,\n                        \"isInverseTrend\": true\n                    },\n                    \"recordField\": \"carbonExample\",\n                    \"colorThresholdTarget\": \"background\"\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {\n                        \"category\": \"dt.entity.host\",\n                        \"value\": \"timestamp\"\n                    },\n                    \"legend\": \"auto\"\n                },\n                \"unitsOverrides\": [\n                    {\n                        \"identifier\": \"carbonExample\",\n                        \"unitCategory\": \"mass\",\n                        \"baseUnit\": \"kilogram\",\n                        \"displayUnit\": \"kilogram\",\n                        \"decimals\": 0,\n                        \"suffix\": \"\",\n                        \"delimiter\": false,\n                        \"added\": 1703159936837\n                    }\n                ],\n                \"histogram\": {\n                    \"dataMappings\": [\n                        {\n                            \"valueAxis\": \"carbonExample\",\n                            \"rangeAxis\": \"\"\n                        }\n                    ]\n                }\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"76\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// This number obviously requires the Carbon app to be installed. An example way to calculate the footprint for part of the journey is:\\n// - Fetch the Biz Events related to this part of the journey.\\n// - Collect a \\\"Distinct\\\" list of the Hosts those Biz Events come from.\\n// - \\\"Lookup\\\" the Carbon events related to those hosts.\\n// - (Optional) If there's lots of shared infrastructure, you can go one step further and use the Process CPU to distribute Carbon to the specific Processes in use.\\nfetch bizevents\\n| fieldsAdd carbonExample = 98\\n| limit 1\",\n            \"davis\": {\n                \"enabled\": false,\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"singleValue\",\n            \"visualizationSettings\": {\n                \"thresholds\": [\n                    {\n                        \"id\": 1,\n                        \"field\": \"carbonExample\",\n                        \"title\": \"Carbon footprint\",\n                        \"isEnabled\": true,\n                        \"rules\": [\n                            {\n                                \"id\": 0,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-apdex-excellent-default, #2a7453)\"\n                                },\n                                \"comparator\": \"<\",\n                                \"label\": \"\",\n                                \"value\": 1000\n                            }\n                        ]\n                    }\n                ],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {},\n                    \"fieldMapping\": {\n                        \"timestamp\": \"timestamp\",\n                        \"leftAxisValues\": [\n                            \"carbonExample\"\n                        ],\n                        \"leftAxisDimensions\": [\n                            \"dt.entity.host\"\n                        ]\n                    },\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxis\": \"dt.entity.host\",\n                        \"valueAxis\": \"carbonExample\",\n                        \"categoryAxisLabel\": \"dt.entity.host\",\n                        \"valueAxisLabel\": \"carbonExample\"\n                    },\n                    \"hiddenLegendFields\": []\n                },\n                \"singleValue\": {\n                    \"showLabel\": true,\n                    \"label\": \"🌳 CARBON\",\n                    \"autoscale\": true,\n                    \"sparklineSettings\": {\n                        \"isVisible\": false,\n                        \"showTicks\": true\n                    },\n                    \"alignment\": \"center\",\n                    \"trend\": {\n                        \"isVisible\": true,\n                        \"isRelative\": true,\n                        \"isInverseTrend\": true\n                    },\n                    \"recordField\": \"carbonExample\",\n                    \"colorThresholdTarget\": \"background\"\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {\n                        \"category\": \"dt.entity.host\",\n                        \"value\": \"timestamp\"\n                    },\n                    \"legend\": \"auto\"\n                },\n                \"unitsOverrides\": [\n                    {\n                        \"identifier\": \"carbonExample\",\n                        \"unitCategory\": \"mass\",\n                        \"baseUnit\": \"kilogram\",\n                        \"displayUnit\": \"kilogram\",\n                        \"decimals\": 0,\n                        \"suffix\": \"\",\n                        \"delimiter\": false,\n                        \"added\": 1703159936837\n                    }\n                ],\n                \"histogram\": {\n                    \"dataMappings\": [\n                        {\n                            \"valueAxis\": \"carbonExample\",\n                            \"rangeAxis\": \"\"\n                        }\n                    ]\n                }\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"77\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// This number obviously requires the Carbon app to be installed. An example way to calculate the footprint for part of the journey is:\\n// - Fetch the Biz Events related to this part of the journey.\\n// - Collect a \\\"Distinct\\\" list of the Hosts those Biz Events come from.\\n// - \\\"Lookup\\\" the Carbon events related to those hosts.\\n// - (Optional) If there's lots of shared infrastructure, you can go one step further and use the Process CPU to distribute Carbon to the specific Processes in use.\\nfetch bizevents\\n| fieldsAdd carbonExample = 56\\n| limit 1\",\n            \"davis\": {\n                \"enabled\": false,\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"singleValue\",\n            \"visualizationSettings\": {\n                \"thresholds\": [\n                    {\n                        \"id\": 1,\n                        \"field\": \"carbonExample\",\n                        \"title\": \"Carbon footprint\",\n                        \"isEnabled\": true,\n                        \"rules\": [\n                            {\n                                \"id\": 0,\n                                \"color\": {\n                                    \"Default\": \"var(--dt-colors-charts-apdex-excellent-default, #2a7453)\"\n                                },\n                                \"comparator\": \"<\",\n                                \"label\": \"\",\n                                \"value\": 1000\n                            }\n                        ]\n                    }\n                ],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {},\n                    \"fieldMapping\": {\n                        \"timestamp\": \"timestamp\",\n                        \"leftAxisValues\": [\n                            \"carbonExample\"\n                        ],\n                        \"leftAxisDimensions\": [\n                            \"dt.entity.host\"\n                        ]\n                    },\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxis\": \"dt.entity.host\",\n                        \"valueAxis\": \"carbonExample\",\n                        \"categoryAxisLabel\": \"dt.entity.host\",\n                        \"valueAxisLabel\": \"carbonExample\"\n                    },\n                    \"hiddenLegendFields\": []\n                },\n                \"singleValue\": {\n                    \"showLabel\": true,\n                    \"label\": \"🌳 CARBON\",\n                    \"autoscale\": true,\n                    \"sparklineSettings\": {\n                        \"isVisible\": false,\n                        \"showTicks\": true\n                    },\n                    \"alignment\": \"center\",\n                    \"trend\": {\n                        \"isVisible\": true,\n                        \"isRelative\": true,\n                        \"isInverseTrend\": true\n                    },\n                    \"recordField\": \"carbonExample\",\n                    \"colorThresholdTarget\": \"background\"\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {\n                        \"category\": \"dt.entity.host\",\n                        \"value\": \"timestamp\"\n                    },\n                    \"legend\": \"auto\"\n                },\n                \"unitsOverrides\": [\n                    {\n                        \"identifier\": \"carbonExample\",\n                        \"unitCategory\": \"mass\",\n                        \"baseUnit\": \"kilogram\",\n                        \"displayUnit\": \"kilogram\",\n                        \"decimals\": 0,\n                        \"suffix\": \"\",\n                        \"delimiter\": false,\n                        \"added\": 1703159936837\n                    }\n                ],\n                \"histogram\": {\n                    \"dataMappings\": [\n                        {\n                            \"valueAxis\": \"carbonExample\",\n                            \"rangeAxis\": \"\"\n                        }\n                    ]\n                }\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"78\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// Real example from the data looking at the time between shipping and order being received, for \\\"Gold\\\" members.\\nfetch bizevents\\n| filter event.provider == \\\"\" + eventProvider + \"\\\" \\n| filter event.type == \\\"order.shipped\\\" or event.type == \\\"order.received\\\" or event.type == \\\"place.order\\\"\\n| sort timestamp asc\\n| fieldsAdd placeOrderTimestamp = if(event.type == \\\"place.order\\\", timestamp), receivedTimestamp = if(event.type == \\\"order.received\\\", timestamp)\\n| summarize placeOrderTime = takeMin(placeOrderTimestamp), receivedTime = takeMin(receivedTimestamp), loyalty = takeAny(loyalty), by:{order.id}\\n| filterOut isNull(receivedTime) or isNull(placeOrderTime)\\n| fieldsAdd totalTime = receivedTime - placeOrderTime\\n| summarize `End-to-end order time` = avg(totalTime), by:{loyalty}\",\n            \"davis\": {\n                \"enabled\": false,\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"categoricalBarChart\",\n            \"visualizationSettings\": {\n                \"thresholds\": [],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {\n                        \"basic\": {\n                            \"color\": \"var(--dt-colors-charts-categorical-color-02-default, #2c2f3f)\",\n                            \"added\": 1719832423731\n                        },\n                        \"bronze\": {\n                            \"color\": \"var(--dt-colors-charts-categorical-color-10-default, #904523)\",\n                            \"added\": 1719832425880\n                        },\n                        \"gold\": {\n                            \"color\": \"var(--dt-colors-charts-categorical-color-06-default, #a9780f)\",\n                            \"added\": 1719832427185\n                        },\n                        \"silver\": {\n                            \"color\": \"var(--dt-colors-charts-categorical-color-05-default, #84859a)\",\n                            \"added\": 1719832429081\n                        }\n                    },\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxis\": \"loyalty\",\n                        \"valueAxis\": \"End-to-end order time\",\n                        \"categoryAxisLabel\": \"loyalty\",\n                        \"valueAxisLabel\": \"End-to-end order time\",\n                        \"layout\": \"vertical\"\n                    },\n                    \"hiddenLegendFields\": [],\n                    \"legend\": {\n                        \"hidden\": true\n                    }\n                },\n                \"singleValue\": {\n                    \"showLabel\": false,\n                    \"label\": \"\",\n                    \"prefixIcon\": \"\",\n                    \"recordField\": \"test\",\n                    \"autoscale\": true,\n                    \"sparklineSettings\": {\n                        \"showTicks\": true\n                    },\n                    \"alignment\": \"center\"\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {\n                        \"category\": \"loyalty\",\n                        \"value\": \"loyalty\"\n                    },\n                    \"legend\": \"auto\"\n                },\n                \"unitsOverrides\": [\n                    {\n                        \"identifier\": \"singlevalue\",\n                        \"unitCategory\": \"time\",\n                        \"baseUnit\": \"second\",\n                        \"displayUnit\": null,\n                        \"decimals\": 0,\n                        \"suffix\": \"\",\n                        \"delimiter\": false,\n                        \"added\": 1703177374563\n                    }\n                ],\n                \"histogram\": {\n                    \"dataMappings\": [\n                        {\n                            \"valueAxis\": \"End-to-end order time\",\n                            \"rangeAxis\": \"\"\n                        }\n                    ]\n                }\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        },\n        \"79\": {\n            \"type\": \"data\",\n            \"title\": \"\",\n            \"query\": \"// Real example from the data of value of \\\"vouchers\\\" sent to people with shipping errors - which is 10% of order value over $1000.\\nfetch bizevents\\n| filter event.provider == \\\"\" + eventProvider + \"\\\"\\n| filter event.type == \\\"order.shipped.system.outage\\\" or event.type == \\\"place.order\\\"\\n| fieldsAdd placeOrderTime = if(event.type == \\\"place.order\\\", timestamp), shippingErrorTime = if(event.type == \\\"order.shipped.system.outage\\\", timestamp)\\n| summarize placeOrderTime = takeFirst(placeOrderTime), shippingErrorTime = takeFirst(shippingErrorTime), order.value = takeMax(order.value), by:{order.id}\\n| filter isNotNull(placeOrderTime) and isNotNull(shippingErrorTime) and order.value > 1000\\n| fieldsAdd order.value = order.value * 0.10\\n| summarize totalVoucherOffer = sum(order.value)\",\n            \"davis\": {\n                \"enabled\": false,\n                \"davisVisualization\": {\n                    \"isAvailable\": true\n                }\n            },\n            \"visualization\": \"singleValue\",\n            \"visualizationSettings\": {\n                \"thresholds\": [],\n                \"chartSettings\": {\n                    \"gapPolicy\": \"connect\",\n                    \"circleChartSettings\": {\n                        \"groupingThresholdType\": \"relative\",\n                        \"groupingThresholdValue\": 0,\n                        \"valueType\": \"relative\"\n                    },\n                    \"categoryOverrides\": {\n                        \"sapphire\": {\n                            \"color\": \"var(--dt-colors-charts-categorical-color-01-default, #134fc9)\",\n                            \"added\": 1717151655357\n                        },\n                        \"gold\": {\n                            \"color\": \"var(--dt-colors-charts-categorical-color-06-default, #a9780f)\",\n                            \"added\": 1717151659952\n                        },\n                        \"noir\": {\n                            \"color\": \"var(--dt-colors-charts-loglevel-none-default, #2c2f3f)\",\n                            \"added\": 1717151665036\n                        },\n                        \"pearl\": {\n                            \"color\": \"var(--dt-colors-charts-categorical-color-02-default, #2c2f3f)\",\n                            \"added\": 1717151669712\n                        },\n                        \"platinum\": {\n                            \"color\": \"var(--dt-colors-charts-categorical-color-07-default, #438fb1)\",\n                            \"added\": 1717151677352\n                        }\n                    },\n                    \"categoricalBarChartSettings\": {\n                        \"categoryAxisLabel\": \"dt.entity.host\",\n                        \"valueAxisLabel\": \"test\",\n                        \"layout\": \"horizontal\"\n                    },\n                    \"hiddenLegendFields\": [],\n                    \"legend\": {\n                        \"hidden\": true\n                    }\n                },\n                \"singleValue\": {\n                    \"showLabel\": false,\n                    \"label\": \"\",\n                    \"prefixIcon\": \"MoneyIcon\",\n                    \"recordField\": \"totalVoucherOffer\",\n                    \"autoscale\": true,\n                    \"sparklineSettings\": {\n                        \"showTicks\": true\n                    },\n                    \"alignment\": \"center\"\n                },\n                \"table\": {\n                    \"rowDensity\": \"condensed\",\n                    \"enableSparklines\": false,\n                    \"hiddenColumns\": [],\n                    \"lineWrapIds\": [],\n                    \"columnWidths\": {}\n                },\n                \"honeycomb\": {\n                    \"shape\": \"square\",\n                    \"dataMappings\": {},\n                    \"legend\": \"auto\"\n                },\n                \"unitsOverrides\": [\n                    {\n                        \"identifier\": \"totalVoucherOffer\",\n                        \"unitCategory\": \"currency\",\n                        \"baseUnit\": \"usd\",\n                        \"displayUnit\": null,\n                        \"decimals\": 0,\n                        \"suffix\": \"$\",\n                        \"delimiter\": true,\n                        \"added\": 1703177374563\n                    }\n                ],\n                \"histogram\": {\n                    \"dataMappings\": [\n                        {\n                            \"valueAxis\": \"totalVoucherOffer\",\n                            \"rangeAxis\": \"\"\n                        }\n                    ]\n                }\n            },\n            \"querySettings\": {\n                \"maxResultRecords\": 1000,\n                \"defaultScanLimitGbytes\": 500,\n                \"maxResultMegaBytes\": 100,\n                \"defaultSamplingRatio\": 10,\n                \"enableSampling\": false\n            }\n        }\n    },\n    \"layouts\": {\n        \"0\": {\n            \"x\": 0,\n            \"y\": 0,\n            \"w\": 4,\n            \"h\": 2\n        },\n        \"1\": {\n            \"x\": 5,\n            \"y\": 0,\n            \"w\": 4,\n            \"h\": 2\n        },\n        \"2\": {\n            \"x\": 10,\n            \"y\": 0,\n            \"w\": 4,\n            \"h\": 2\n        },\n        \"3\": {\n            \"x\": 15,\n            \"y\": 0,\n            \"w\": 4,\n            \"h\": 2\n        },\n        \"4\": {\n            \"x\": 20,\n            \"y\": 0,\n            \"w\": 4,\n            \"h\": 2\n        },\n        \"6\": {\n            \"x\": 0,\n            \"y\": 2,\n            \"w\": 2,\n            \"h\": 2\n        },\n        \"11\": {\n            \"x\": 0,\n            \"y\": 17,\n            \"w\": 4,\n            \"h\": 5\n        },\n        \"13\": {\n            \"x\": 0,\n            \"y\": 6,\n            \"w\": 4,\n            \"h\": 1\n        },\n        \"14\": {\n            \"x\": 0,\n            \"y\": 9,\n            \"w\": 4,\n            \"h\": 5\n        },\n        \"15\": {\n            \"x\": 0,\n            \"y\": 15,\n            \"w\": 4,\n            \"h\": 2\n        },\n        \"16\": {\n            \"x\": 0,\n            \"y\": 7,\n            \"w\": 4,\n            \"h\": 2\n        },\n        \"17\": {\n            \"x\": 5,\n            \"y\": 7,\n            \"w\": 4,\n            \"h\": 2\n        },\n        \"18\": {\n            \"x\": 2,\n            \"y\": 2,\n            \"w\": 2,\n            \"h\": 2\n        },\n        \"22\": {\n            \"x\": 5,\n            \"y\": 9,\n            \"w\": 4,\n            \"h\": 5\n        },\n        \"23\": {\n            \"x\": 5,\n            \"y\": 15,\n            \"w\": 4,\n            \"h\": 2\n        },\n        \"24\": {\n            \"x\": 5,\n            \"y\": 17,\n            \"w\": 4,\n            \"h\": 5\n        },\n        \"25\": {\n            \"x\": 0,\n            \"y\": 4,\n            \"w\": 2,\n            \"h\": 2\n        },\n        \"26\": {\n            \"x\": 2,\n            \"y\": 4,\n            \"w\": 2,\n            \"h\": 2\n        },\n        \"28\": {\n            \"x\": 7,\n            \"y\": 4,\n            \"w\": 2,\n            \"h\": 2\n        },\n        \"31\": {\n            \"x\": 12,\n            \"y\": 4,\n            \"w\": 2,\n            \"h\": 2\n        },\n        \"32\": {\n            \"x\": 17,\n            \"y\": 4,\n            \"w\": 2,\n            \"h\": 2\n        },\n        \"33\": {\n            \"x\": 10,\n            \"y\": 9,\n            \"w\": 4,\n            \"h\": 5\n        },\n        \"34\": {\n            \"x\": 10,\n            \"y\": 7,\n            \"w\": 4,\n            \"h\": 2\n        },\n        \"35\": {\n            \"x\": 15,\n            \"y\": 7,\n            \"w\": 4,\n            \"h\": 2\n        },\n        \"36\": {\n            \"x\": 15,\n            \"y\": 15,\n            \"w\": 4,\n            \"h\": 2\n        },\n        \"37\": {\n            \"x\": 15,\n            \"y\": 9,\n            \"w\": 4,\n            \"h\": 5\n        },\n        \"39\": {\n            \"x\": 10,\n            \"y\": 15,\n            \"w\": 4,\n            \"h\": 2\n        },\n        \"40\": {\n            \"x\": 20,\n            \"y\": 7,\n            \"w\": 4,\n            \"h\": 2\n        },\n        \"41\": {\n            \"x\": 20,\n            \"y\": 9,\n            \"w\": 4,\n            \"h\": 5\n        },\n        \"42\": {\n            \"x\": 20,\n            \"y\": 15,\n            \"w\": 4,\n            \"h\": 2\n        },\n        \"45\": {\n            \"x\": 22,\n            \"y\": 4,\n            \"w\": 2,\n            \"h\": 2\n        },\n        \"49\": {\n            \"x\": 10,\n            \"y\": 17,\n            \"w\": 4,\n            \"h\": 5\n        },\n        \"51\": {\n            \"x\": 0,\n            \"y\": 14,\n            \"w\": 24,\n            \"h\": 1\n        },\n        \"53\": {\n            \"x\": 10,\n            \"y\": 6,\n            \"w\": 4,\n            \"h\": 1\n        },\n        \"54\": {\n            \"x\": 15,\n            \"y\": 6,\n            \"w\": 4,\n            \"h\": 1\n        },\n        \"55\": {\n            \"x\": 20,\n            \"y\": 6,\n            \"w\": 4,\n            \"h\": 1\n        },\n        \"56\": {\n            \"x\": 5,\n            \"y\": 6,\n            \"w\": 4,\n            \"h\": 1\n        },\n        \"66\": {\n            \"x\": 5,\n            \"y\": 2,\n            \"w\": 2,\n            \"h\": 2\n        },\n        \"67\": {\n            \"x\": 10,\n            \"y\": 2,\n            \"w\": 2,\n            \"h\": 2\n        },\n        \"68\": {\n            \"x\": 15,\n            \"y\": 2,\n            \"w\": 2,\n            \"h\": 2\n        },\n        \"69\": {\n            \"x\": 20,\n            \"y\": 2,\n            \"w\": 2,\n            \"h\": 2\n        },\n        \"70\": {\n            \"x\": 7,\n            \"y\": 2,\n            \"w\": 2,\n            \"h\": 2\n        },\n        \"71\": {\n            \"x\": 12,\n            \"y\": 2,\n            \"w\": 2,\n            \"h\": 2\n        },\n        \"72\": {\n            \"x\": 17,\n            \"y\": 2,\n            \"w\": 2,\n            \"h\": 2\n        },\n        \"73\": {\n            \"x\": 22,\n            \"y\": 2,\n            \"w\": 2,\n            \"h\": 2\n        },\n        \"74\": {\n            \"x\": 5,\n            \"y\": 4,\n            \"w\": 2,\n            \"h\": 2\n        },\n        \"75\": {\n            \"x\": 10,\n            \"y\": 4,\n            \"w\": 2,\n            \"h\": 2\n        },\n        \"76\": {\n            \"x\": 15,\n            \"y\": 4,\n            \"w\": 2,\n            \"h\": 2\n        },\n        \"77\": {\n            \"x\": 20,\n            \"y\": 4,\n            \"w\": 2,\n            \"h\": 2\n        },\n        \"78\": {\n            \"x\": 20,\n            \"y\": 17,\n            \"w\": 4,\n            \"h\": 5\n        },\n        \"79\": {\n            \"x\": 15,\n            \"y\": 17,\n            \"w\": 4,\n            \"h\": 5\n        }\n    },\n    \"importedWithCode\": false,\n    \"settings\": {\n        \"defaultTimeframe\": {\n            \"value\": {\n                \"from\": \"now()-24h\",\n                \"to\": \"now()\"\n            },\n            \"enabled\": true\n        }\n    }  \n}\n\n\n\n  // If the \"config\" step says to install the example, and the dashboard doesn't already exist\n  // then carry on and create it.\n  if(dashboardCheck == false && dashboardExample == true){\n\n    // Creation of the dashboard as a \"document\"\n    const data = await documentsClient.createDocument({\n      body: { name: flowName, \n              type: \"dashboard\", \n              content: new Blob([JSON.stringify(dashboardJson)], {type: \"application/json\"}),\n              externalId: EXTERNAL_ID}\n    });\n    \n    console.log(data);\n\n  }\n\n  // Logic for handling if the \"config\" is set not to create it.\n  else if(dashboardExample == false) {\n    console.log(\"Config is set not to insert example dashboard.\");        \n  }\n    \n  // Logic for handling if the dashboard already exists.\n  else if(dashboardCheck == true) {\n    console.log(\"Dashboard already exists, skipping.\");\n  }\n\n  // Logic for handling anything else.\n  else {\n    console.log(\"Not doing it for some unknown reason.\");\n  }\n    \n  return;\n}"
      },
      "position": {
        "x": -2,
        "y": 4
      },
      "predecessors": [
        "create_bizflow"
      ],
      "conditions": {
        "states": {
          "create_bizflow": "ANY"
        }
      }
    }
  },
  "description": "",
  "ownerType": "USER",
  "isPrivate": false,
  "trigger": {
    "schedule": {
      "isActive": false,
      "isFaulty": false,
      "trigger": {
        "type": "interval",
        "intervalMinutes": 5
      },
      "rule": null,
      "timezone": "Europe/London",
      "inputs": {}
    }
  },
  "schemaVersion": 3
}